{"version":3,"file":"src_app_pages_jobs_job-page_job-page_module_ts.js","mappings":"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","sources":["./src/app/pages/jobs/job-page/job-page-routing.module.ts","./src/app/pages/jobs/job-page/job-page.module.ts","./src/app/pages/jobs/job-page/job-page.page.ts","./src/app/services/favorite-jobs.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { JobPagePage } from './job-page.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: JobPagePage\n  },\n  {\n    path: 'apply/:title/:companyName/:companyEmail/:companyLogo/:rateOfPay',\n    loadChildren: () => import('../apply/apply.module').then( m => m.ApplyPageModule)\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class JobPagePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CustomComponentsModule } from '../../../components/custom-component.module';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { JobPagePageRoutingModule } from './job-page-routing.module';\n\nimport { JobPagePage } from './job-page.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CustomComponentsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    JobPagePageRoutingModule\n  ],\n  declarations: [JobPagePage]\n})\nexport class JobPagePageModule {}\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Subscription} from 'rxjs';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ToastController } from '@ionic/angular';\nimport { ProfileService } from 'src/app/services/profile.service';\nimport { FavoriteJobsService } from 'src/app/services/favorite-jobs.service';\nimport { JobsService } from 'src/app/services/jobs.service';\nimport { FavoritesEventEmitterService } from 'src/app/emitters/favorites-event-emitter.service';\nimport { PlatformLocation } from '@angular/common';\n\n\n@Component({\n  selector: 'app-job-page',\n  templateUrl: './job-page.page.html',\n  styleUrls: ['./job-page.page.scss'],\n})\nexport class JobPagePage implements OnInit, OnDestroy {\n\n  jobObj: string;\n  jobId: string;\n  jobTitle: string;\n  jobCompanyName: string;\n  jobCompanyEmail: string;\n  jobSummary: string;\n  jobFullJobDescription: string;\n  jobRateOfPay: string;\n  jobDatePosted: string;\n  favoriteJobsObj;\n  jobLogo: string;\n\n  profileSub: Subscription;\n  favoriteJobsSub: Subscription;\n  jobsSub: Subscription;\n  favoritesSub: Subscription;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private toastController: ToastController,\n    private profile: ProfileService,\n    private favorites: FavoriteJobsService,\n    private jobs: JobsService,\n    private eventEmitterService: FavoritesEventEmitterService,\n    private location: PlatformLocation\n  ) { }\n  ngOnDestroy(): void {\n    this.profileSub.unsubscribe();\n    this.favoriteJobsSub.unsubscribe();\n    this.favoritesSub.unsubscribe();\n    this.jobsSub.unsubscribe();\n  }\n  ngOnInit() {\n\n    this.location.onPopState(() => {\n      this.triggerJobPageRefresh();\n    });\n\n    // tslint:disable-next-line: radix\n    const id  = this.activatedRoute.snapshot.paramMap.get('id');\n    // tslint:disable-next-line: radix\n    const title  = this.activatedRoute.snapshot.paramMap.get('title');\n    // tslint:disable-next-line: radix\n    const companyLogo  = this.activatedRoute.snapshot.paramMap.get('companyLogo');\n    // tslint:disable-next-line: radix\n    const companyName  = this.activatedRoute.snapshot.paramMap.get('companyName');\n    // tslint:disable-next-line: radix\n    const companyEmail  = this.activatedRoute.snapshot.paramMap.get('companyEmail');\n     // tslint:disable-next-line: radix\n    const summary  = this.activatedRoute.snapshot.paramMap.get('summary');\n     // tslint:disable-next-line: radix\n    const fullJobDescription  = this.activatedRoute.snapshot.paramMap.get('fullJobDescription');\n      // tslint:disable-next-line: radix\n    const rateOfPay  = this.activatedRoute.snapshot.paramMap.get('rateOfPay');\n\n    this.jobId = id;\n    this.jobTitle = title;\n    this.jobLogo = companyLogo;\n    // this.jobPosted = posted;\n    this.jobCompanyName = companyName;\n    this.jobCompanyEmail = companyEmail;\n    this.jobSummary = summary;\n    this.jobFullJobDescription = fullJobDescription;\n    this.jobRateOfPay = rateOfPay;\n    // this.getFavoriteJobs();\n  }\n\n  // getFavoriteJobs() {\n  //   // getting all the favorite jobs that the user has on their profile\n  //   this.profileSub = this.profile.getUserDetails().subscribe(\n  //     data => {\n  //       let favoriteJobs = data['favoriteJobs']\n\n  //       this.favorites.favoriteJobs$.next(favoriteJobs);\n  //       this.favoriteJobsSub = this.favorites.favoriteJobs$.subscribe(\n  //         favs => {\n  //           console.log(`Favorite Jobs in Service: ${favs}`);\n  //           // this.jobsSub = this.jobs.getJobs().subscribe( jobs => {\n  //           //   for (const job of Object.values(jobs)) {\n  //           //     if (this.jobId == job._id) {\n  //           //       this.jobObj = job;\n  //           //     }\n  //           //   }\n  //           // });\n  //           this.favoritesSub = this.favorites.getFavorites(data['email']).subscribe( favDetails => {\n  //             this.favoriteJobsObj = favDetails;\n  //           });\n  //         }\n  //       );\n  //     }\n  //   );\n  // }\n\n  applyForJob() {\n    // tslint:disable-next-line: max-line-length\n    this.router.navigate(['/home/jobs/job-page/:id/:title/:companyLogo/:companyName/:companyEmail/:summary/:fullJobDescription/:rateOfPay/apply', this.jobTitle, this.jobCompanyName, this.jobCompanyEmail, this.jobLogo, this.jobRateOfPay ]);\n  }\n\n  favoriteThisJob() {\n    console.log('Favoriting this Job');\n    // Check for error before we present the toast\n    this.presentToast();\n  }\n\n  goBack() {\n    this.triggerJobPageRefresh();\n    this.router.navigate(['/home/jobs']);\n  }\n\n  triggerJobPageRefresh() {\n    this.eventEmitterService.onBackAction();\n  }\n\n  async presentToast() {\n    const toast = await this.toastController.create({\n      message: 'This job has been favorited.',\n      duration: 2000\n    });\n    toast.present();\n  }\n\n\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { ToastController } from '@ionic/angular';\nimport { AuthService } from './auth.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class FavoriteJobsService {\n  BACKEND_URL = environment.url;\n  favoriteJobs$ = new BehaviorSubject([]);\n\n  constructor(\n    private http: HttpClient,\n    private auth: AuthService,\n    private toast: ToastController\n  ) {}\n\n\n}\n\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}