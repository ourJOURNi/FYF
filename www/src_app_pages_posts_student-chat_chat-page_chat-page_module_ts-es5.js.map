{"version":3,"mappings":"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","names":["routes","path","component","_chat_page_page__WEBPACK_IMPORTED_MODULE_0__","ChatPagePageRoutingModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_3__","exports","ChatPagePageModule","_angular_common__WEBPACK_IMPORTED_MODULE_5__","_angular_forms__WEBPACK_IMPORTED_MODULE_6__","_ionic_angular__WEBPACK_IMPORTED_MODULE_7__","ion_bottom_drawer__WEBPACK_IMPORTED_MODULE_8__","_chat_page_routing_module__WEBPACK_IMPORTED_MODULE_0__","src_app_modals_report_convo_report_convo_module__WEBPACK_IMPORTED_MODULE_2__","declarations","_chat_page_page__WEBPACK_IMPORTED_MODULE_1__","ChatPagePage","alert","modal","studentChatService","activatedRoute","toast","ion_bottom_drawer__WEBPACK_IMPORTED_MODULE_4__","chatId","snapshot","paramMap","get","email","fullName","profilePicture","messageList","document","getElementById","_chatroomSub","unsubscribe","setTimeout","input","getInputElement","then","message","value","console","log","create","cssClass","duration","present","focus","drawerState","header","buttons","text","handler","role","src_app_modals_report_convo_report_convo_page__WEBPACK_IMPORTED_MODULE_2__","componentProps","reportModalConfig","_ionic_angular__WEBPACK_IMPORTED_MODULE_6__","src_app_services_student_chat_service__WEBPACK_IMPORTED_MODULE_3__","_angular_router__WEBPACK_IMPORTED_MODULE_7__","_angular_core__WEBPACK_IMPORTED_MODULE_8__","args","selector","template","__webpack_exports__"],"sources":["webpack:///src/app/pages/posts/student-chat/chat-page/chat-page-routing.module.ts","webpack:///src/app/pages/posts/student-chat/chat-page/chat-page.module.ts","webpack:///src/app/pages/posts/student-chat/chat-page/chat-page.page.ts","webpack:///src/app/pages/posts/student-chat/chat-page/chat-page.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ChatPagePage } from './chat-page.page';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatPagePage\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ChatPagePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { IonBottomDrawerModule } from 'ion-bottom-drawer';\n\nimport { ChatPagePageRoutingModule } from './chat-page-routing.module';\n\nimport { ChatPagePage } from './chat-page.page';\nimport { ReportConvoPageModule } from 'src/app/modals/report-convo/report-convo.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    IonBottomDrawerModule,\n    ChatPagePageRoutingModule,\n    ReportConvoPageModule,\n  ],\n  declarations: [ChatPagePage]\n})\nexport class ChatPagePageModule {}\n","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { DrawerState } from 'ion-bottom-drawer';\nimport { AlertController, ModalController, ToastController } from '@ionic/angular';\nimport { ReportConvoPage } from 'src/app/modals/report-convo/report-convo.page';\nimport { StudentChatService } from 'src/app/services/student-chat.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { formatDistanceToNow } from 'date-fns';\nimport { IonInput } from '@ionic/angular';\n\n\n\n@Component({\n  selector: 'app-chat-page',\n  templateUrl: './chat-page.page.html',\n  styleUrls: ['./chat-page.page.scss'],\n})\nexport class ChatPagePage implements OnInit, OnDestroy {\n\n\n  @ViewChild('message', {static: false}) input: IonInput;\n\n  // Bottom Drawer Settings\n  shouldBounce = true;\n  dockedHeight = 400;\n  distanceTop = 56;\n  drawerState = DrawerState.Bottom;\n  states = DrawerState;\n  minimumHeight = 0;\n\n  _chatroomSub: Subscription;\n  chatroom;\n  chatId: string;\n\n  // Requesting User\n  requestingUserFullname: string;\n  requestingUserEmail: string;\n  requestingUserPhoto: string;\n\n  // Responding User\n  respondingUserFullname: string;\n  respondingUserEmail: string;\n  respondingUserPhoto: string;\n\n  // Client Users's info for chat messages\n  fullName: string;\n  email: string;\n  profilePicture: string;\n\n  // Message Input Element Reference\n  message: HTMLInputElement;\n\n  constructor(\n    private alert: AlertController,\n    private modal: ModalController,\n    private studentChatService: StudentChatService,\n    private activatedRoute: ActivatedRoute,\n    private toast: ToastController\n  ) { }\n\n   ngOnInit() {\n\n    const chatId  =  this.activatedRoute.snapshot.paramMap.get('chatId');\n    this.chatId = chatId;\n    const email  =  this.activatedRoute.snapshot.paramMap.get('email');\n    this.email = email;\n    const fullName  =  this.activatedRoute.snapshot.paramMap.get('fullName');\n    this.fullName = fullName;\n    const profilePicture  =  this.activatedRoute.snapshot.paramMap.get('profilePicture');\n    this.profilePicture = profilePicture;\n\n    const messageList = document.getElementById('message-list');\n\n\n    // this.studentChatService.getChat(this.chatId, this.email);\n\n    // this._chatroomSub = this.studentChatService.currentChatRoom\n    // .subscribe(\n    //   data => {\n    //     // console.log(data);\n    //     this.chatroom = data['messages'];\n    //     this.requestingUserFullname = data['requestingUserFullname'];\n    //     this.requestingUserEmail = data['requestingUserEmail'];\n    //     this.requestingUserPhoto = data['requestingUserPhoto'];\n    //     this.respondingUserFullname = data['respondingUserFullname'];\n    //     this.respondingUserEmail = data['respondingUserEmail'];\n    //     this.respondingUserPhoto = data['respondingUserPhoto'];\n\n    //     // if (this.chatroom.length >= 5) {\n    //     //   console.log('more than 3 messages sent');\n    //     //   this.studentChatService.deleteMessages(this.chatId, this.fullName , this.email);\n    //     // }\n\n    //     for (let message of this.chatroom) {\n    //       message.date = formatDistanceToNow(new Date(message.date));\n    //     }\n    //     // console.log(this.chatroom);\n    //   });\n  }\n\n  ngOnDestroy(): void {\n    this._chatroomSub.unsubscribe();\n    // leave room\n  }\n\n  // tslint:disable-next-line: use-lifecycle-interface\n  ngAfterViewInit() {\n    setTimeout(() => {\n       this.input.getInputElement()\n        .then( input => {\n          this.message = input;\n        });\n  }, 400);\n}\n\n  async sendMessage() {\n    // if user tries to send a message with no text\n    if (this.message.value === '') {\n      console.log('This message has no text');\n      const toast = await this.toast.create({\n        message: 'This message has no text.',\n        cssClass: 'danger-toast',\n        duration: 2000\n      });\n      toast.present();\n      return false;\n    }\n\n    // tslint:disable-next-line: max-line-length\n    // await this.studentChatService.sendMessage(this.chatId, this.message.value, this.fullName, this.profilePicture, this.requestingUserFullname, this.requestingUserEmail, this.requestingUserPhoto, this.respondingUserFullname, this.respondingUserEmail, this.respondingUserPhoto);\n\n    // this.studentChatService.conversations$.next(this.chatroom);\n\n    // When user submits message, clear the input value\n    this.message.value = '';\n    this.message.focus();\n\n\n    // this.studentChatService.getChat(this.chatId, this.email);\n    // this.message = '';\n  }\n\n  menu() {\n    if (this.drawerState === DrawerState.Bottom) {\n      this.drawerState = DrawerState.Docked;\n    } else {\n        this.drawerState = DrawerState.Bottom;\n    }\n  }\n\n  async delertAlert() {\n    const alert = await this.alert.create({\n      cssClass: '',\n      header: 'Are you sure you want to delete this conversation?',\n      buttons: [\n        {\n          text: 'Yes',\n          handler: () => {\n           console.log('Deleting');\n          }\n        },\n        {\n          text: 'Cancel',\n          role: 'cancel'\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n\n  async reportAlert() {\n    const alert = await this.alert.create({\n      cssClass: '',\n      header: 'Are you sure you want to report this conversation?',\n      buttons: [\n        {\n          text: 'Yes',\n          handler: () => {\n           console.log('Reporting');\n          }\n        },\n        {\n          text: 'Cancel',\n          role: 'cancel'\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n\n  async reportConvo() {\n\n    const reportModalConfig = await this.modal.create({\n      component: ReportConvoPage,\n      componentProps: {\n\n      }\n    });\n    this.drawerState = DrawerState.Bottom;\n    await reportModalConfig.present();\n\n  }\n\n}\n","export default \" <!-- Mobile Toolbar -->\\n <ion-header class=\\\"ion-hide-lg-up\\\">\\n  <ion-toolbar>\\n      <ion-buttons slot=\\\"start\\\">\\n        <ion-back-button></ion-back-button>\\n        <p class=\\\"toolbar-title\\\">Conversation</p>\\n      </ion-buttons>\\n      <ion-buttons slot=\\\"end\\\">\\n        <ion-button (click)=\\\"menu()\\\">\\n          <img class=\\\"ellipsis\\\" src=\\\"../../../../../assets/icons/ellipsis.svg\\\" alt=\\\"\\\">\\n        </ion-button>\\n      </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-list lines=\\\"none\\\" id=\\\"message-list\\\">\\n    <!-- <div class=\\\"ion-text-center no-messages\\\" *ngIf=\\\"chatroom.length == 0\\\">\\n      <p>Please send a message to start this conversation.</p>\\n    </div> -->\\n    <ion-item *ngFor=\\\"let message of chatroom\\\">\\n      <ion-avatar>\\n        <img src=\\\"{{message.profilePicture}}\\\" />\\n      </ion-avatar>\\n      <ion-label>\\n        <h4 style=\\\"opacity: 0.8;\\\">{{message.userFullName}} <span class=\\\"date-sent\\\">&middot; {{message.date}}</span></h4>\\n        <p style=\\\"font-size: 1.1em; color: #111;\\\">{{message.text}}</p>\\n      </ion-label>\\n    </ion-item>\\n  </ion-list>\\n  <ion-toolbar class=\\\"chat-messages-create-container\\\">\\n    <ion-input #message (keyup.enter)=\\\"sendMessage()\\\"\\n     type=\\\"text\\\" placeholder=\\\"Type message here\\\"></ion-input>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button  class=\\\"chat-messages-create-button\\\" (click)=\\\"sendMessage()\\\"> Send </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-content>\\n\\n<ion-bottom-drawer [(state)]=\\\"drawerState\\\" [minimumHeight]=\\\"minimumHeight\\\" [dockedHeight]=\\\"dockedHeight\\\"\\n[shouldBounce]=\\\"shouldBounce\\\" [distanceTop]=\\\"distanceTop\\\">\\n<div class=\\\"drawer-content\\\">\\n    <ion-list>\\n      <ion-item lines=\\\"none\\\">\\n        <ion-button class=\\\"blue-button\\\" (click)=\\\"delertAlert()\\\">\\n          Delete\\n        </ion-button>\\n      </ion-item>\\n      <ion-item lines=\\\"none\\\">\\n        <ion-button class=\\\"blue-button\\\" (click)=\\\"reportConvo()\\\">\\n          Report\\n        </ion-button>\\n      </ion-item>\\n      <ion-item lines=\\\"none\\\">\\n        <ion-button class=\\\"grey-button\\\" (click)=\\\"menu()\\\">\\n          Cancel\\n        </ion-button>\\n      </ion-item>\\n    </ion-list>\\n  </div>\\n</ion-bottom-drawer>\\n\";"]}