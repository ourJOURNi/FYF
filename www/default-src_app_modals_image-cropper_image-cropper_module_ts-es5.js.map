{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACE,eAA4DA,0BAA5D,GACA,CADA;AAGD,OAJD,EAIC,IAJD,EAIC;AAAsB;;AAEvB;AACA;;AAEA;AACAC;AACA;AACA,aAFA;AAGA,WAJA,MAIM;AACNA;AACA;AACA,aAFA;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAoBC,gBAApB,EAAsCA,GAAtC,EAAsC;AACtC;AACAC;AACAA;AACA;AACAC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAA;AACAC,0BADA;AAEAC,8BAFA;AAGAC,gCAHA;AAIAC;AAJA;AAMA,WAPA,MAOM;AACNC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACO,aAFP;AAGAC;AACA;;AAEA;AACA;;AAEA;AACA,0BAAoBR,oBAApB,EAA0CA,GAA1C,EAA0C;AAC1C;;AAEA;AACAS;AACAC;AACS,eAFT;AAGA,aAJA,MAIQ;AACRR;AACA,aAFQ,MAEA;AACRO;AACAP;AACS,eAFT;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iDAA2CF,OAA3C,EAAoDA,GAApD;AAAoDW;AAApD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCA9HC,CA8H4B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCA3IC,CA2I+B;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,uDAnJC,CAmJiD;;AAElD;AACA,2DAtJC,CAsJqD;;AAEtD;AACA;AACA,oCA1JC,CA0J8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCA1KC,CA0K0B;;AAE3B,0CA5KC,CA4KoC;;AAErC;AACA;AACA;AACA,8CAjLC,CAiLwC;AACzC;;AAEA;AACA;AAEA;AACA;AACAC,qBAFA;AAGA;AACA;AACAC,kCALA;AAMA;AACA;AACAC,iCARA;AASA;AACAC,0BAVA;AAWA;AACAC,oBAZA;AAaA;AACAC,qBAdA;AAeA;AACAC,0BAhBA;AAiBA;AACAC,uBAlBA;AAmBA;AACAC,gCApBA;AAqBA;AACAC,gCAtBA;AAuBA;AACAC,qBAxBA;AAyBA;AACAC,sBA1BA;AA2BA;AACAC,sBA5BA;AA6BA;AACAC,yBA9BA;AA+BA;AACAC,0BAhCA;AAiCA;AACAC,wBAlCA;AAmCA;AACAC,2BApCA;AAqCA;AACAC,uBAtCA;AAuCA;AACAC,yBAxCA;AAyCA;AACAC,wBA1CA;AA2CA;AACAC,wBA5CA;AA6CA;AACAC,2BA9CA;AA+CA;AACAC,2BAhDA;AAiDA;AACAC,6BAlDA;AAmDA;AACAC,8BApDA;AAqDA;AACAC,gCAtDA;AAuDA;AACAC,wCAxDA;AAyDA;AACAC,2BA1DA;AA2DAC,4BA3DA;AA4DAC,4BA5DA;AA6DAC,6BA7DA;AA8DAC,gDA9DA;AA+DAC,kDA/DA;AAgEA;AACAC,qBAjEA;AAkEAC,yBAlEA;AAmEAC,wBAnEA;AAoEAC,uBApEA;AAqEAC,oBArEA;AAsEAC;AAtEA;AAyEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA,SAFA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAJA,CAIM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA,cAEA;AACAC;AACAC;AACW,eAFX;AAGA,aANA,MAMU;AACVlD;AACAkD;AACS,eAFT;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA,iGAA2FC,WAA3F,EAAwGA,MAAxG,EAAwG;AACxGC;AACA;;AAEA;AACAA;AACA;AACApD;AACAqD;AACW,iBAFX;AAGA;AACO,aANP;AAOA;;AAEA;AACA,SAhBA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAC;AACA;AACArD;AACA;;AAEAsD;AACK,WANL;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;AAEA;AACAD;AACAE;AACO,aAFP;AAGA;AACA;;AAEA;AACAC;AACA;AACA;;AAEA;;AAEA;AACAA;AACA,WAFA,MAEM;AACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;AAEA;AACAH;AACAI;AACO,aAFP;AAGA;AACA;;AAEA;AACAD;AACA;AACA;;AAEA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;AAEA;AACAH;AACAK;AACO,aAFP;AAGA;AACA,WAVA,CAUM;;;AAGN;AACAH;AACA,WAFA,MAEM;AACNE;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACAD;AACA,WAFA,MAEM;AACNA;AACA,WAFM,MAEA;AACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA,aAFA,CAEQ;AACRA;AACA;AACA,WANA,MAMM;AACN;AACA;AACA;AACA,aAFA,CAEQ;AACRA;AACA;AACA,WAPM,MAOA;AACNA;AACA;AACA;;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,oDAA4C,MAA5C,EAA4C;AAC5CG;AACAC;AACA;AACS,eAJmC;;AAM5C;AACA;AACA;AACA;AACA;AACAC;AACAC;AACA;AAb4C,aAA5C;AAeAC;AACAA;AACA;;AAEA;AACG,SA5BH;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACAC;AACA;AACA;;AAEA;AACAC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEAT;AACK,WAnBL;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACAQ;AACA;AACA;AAAA,kBACAE,iDAA2DC,kBAD3D;;AAGAC;AACA;AACAZ;;AAEA,uFAAiFa,aAAjF,EAAgGA,OAAhG,EAAgG;AAChGlB;AACA;;AAEAmB;AACA,eATA;;AAWA;AACAJ;AACA;;AAEA;AACAV;AACA;;AAEAU;AACAV;AACA;;AAEAA;AACK,WA7BL;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA,oBADA,CACe;;AAEf;AACAe;AACAC,0BADA;AAEAC,2BAFA;AAGAC;AAHA;AAKA,WANA,MAMM;AACNH;AACAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACAI,uFADA;AAEAC;AAFA;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA,cACAC,oBADA;AAAA,cAEAC,oBAFA;AAAA,cAGAC,4BAHA;AAAA,cAIAC,4BAJA;AAKA;;AAEA;AACAC;AACA;;AAEA;AACAA;AACA,WAdA,CAcM;;;AAGN;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACA;AACAC,sCADA;AAEAC,kCAFA;AAGAC;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA,6CAAqCC,QAArC;;AAEA;AACAhC;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAiC;AACA;AACO,aAZP;AAaK,WAfL;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA,cACAC,mBADA;AAEA;AACAC,uBADA;AAEAC;AAFA;AAIA;AACAC,yBADA;AAEAC;AAFA,aAGKC,GAHL;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACAvC;AACA;AAAA,gBACAsC,qBADA;AAEAE;AACAN;AACAO;AACK,WANL;AAOAD;AACAN;AACA;AACAM,wBADA;AAEAN;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA,cACAQ,qBADA;AAAA,cAEAC,mBAFA;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACAD;AACA,aAFA,MAEQ;AACRC;AACA;AACA,WARA,MAQM;AACND;AACA,WAFM,MAEA;AACNC;AACA;;AAEA;AACAA,wBADA;AAEAD;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA,cACAA,qBADA;AAAA,cAEAE,qBAFA;AAGAA;;AAEA;AACA;AACAD,2BADA;AAEAD;AAFA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAC,4BADA;AAEAD;AAFA,cAGM;AACNC,2BADM;AAEND;AAFM,WAHN;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA,cACAG,sCADA;AAAA,cAEAC,wCAFA;AAAA,cAGAC,2BAHA;AAAA,cAIAC,mDAJA;AAAA,cAKAC,2BALA;AAAA,cAMAzB,mDANA;AAAA,cAOA0B,2BAPA;AAAA,cAQAzB,mDARA;AASA;AAAA,cACA0B,iCADA;AAAA,cAEAC,mCAFA;AAGA;AAAA,cACAC,wEADA;AAAA,cAEAC,mDAFA;AAAA,cAGAC,uFAHA;AAAA,cAIAC,mDAJA;AAAA,cAKAC,wFALA;AAAA,cAMAC,+BANA;AAAA,cAOAC,gEAPA;AAAA,cAQAC,iCARA;AAAA,cASAC,mEATA;AAAA,cAUAC,+BAVA;AAAA,cAWAC,yDAXA;AAAA,cAYAC,iCAZA;AAAA,cAaAC,4DAbA;AAcA;AACA;AACA;AACA1G,oCADA;AAEAoF,2BAFA;AAGAD;AAHA;AAKA;AACAnF,oCADA;AAEAoF,2BAFA;AAGAD;AAHA,aAIK,OAJL;AAKA;AACA,2FAxCA,CAwCsF;AACtF;;AAEA;AACAnF,yCADA;AAEAoF,2BAFA;AAGAD;AAHA;AAKA;AACAnF,yCADA;AAEAoF,2BAFA;AAGAD;AAHA,aAIK,OAJL;AAKA;AACA;AACA;AACAwB;AACAA;AACAC;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;AACK,WAFL;AAGAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAC;;AAEA,8BAAwB5H,UAAxB,EAAoCA,MAApC,EAAoC;AACpC6H;AACA;;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACArE;AACAsE;AACK,WAFL;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA,0BADA,CACqB;;AAErB;AACA;;AAEA;AACA;AACA;AACAC;AACAD;AACA;;AAEA,sDAAsCE,MAAtC,CAAsCC,qBAAtC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA,0BAFA,CAEqB;;AAErB;AACA;AACA;AACA,yBAHA,CAGoB;;AAEpB;AACA;AACA;;AAEA;AACA;AACAC;AACA;AACA;;AAEAC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACAC;;AAEA;AACA;AADA,kBAEA;AACA;AACA;;AAEA;AACAC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,0BAAoBrI,WAApB,EAAiCA,MAAjC,EAAiC;AACjCsI;;AAEA;AACA;AADA,kBAEA;AACA;AACAA,+BAFA,CAE4B;;AAE5BC,0EAJA,CAIuE;;AAEvEC;AACA;AACA;AACA;AACA;AACA,WAhEA,CAgEM;AACND;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAvD;AACA;AACA;;AAEA;AACAwB;AACA;AACA;;AAEA;AACAvB;AACA;AACA;;AAEA;AACAuB;AACAvB;AACA;AACA;;AAEA;AACAuB;AACA;AACA;;AAEA;AACAA;AACAxB;AACA;AACA;;AAEA;AACAwB;AACA;AApCA;;AAuCA;AACAA,0BADA;AAEAxB,0BAFA;AAGAC;AAHA;AAKA;;AAEA;AACAwD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACK,WAVL;AAWAC;AACA;AAAA,gBACAC,sBADA;AAAA,gBAEAC,0BAFA;AAAA,gBAGAC,sBAHA;AAIA;AACA;AACAnF;AACAE;AACA;AACAuC,oGADA;AAEAD;AAFA;AAIA;AACA4C;AACA3C,wCADA;AAEAD;AAFA;AAIAxC;AACAE;AACK,WA/BL;AAgCA;AACAmF;AACA;AAAA,gBACAC,0BADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAC;AACA,eAFA,MAEU;AACVC;AACA;AACA,aANA,MAMQ;AACRA;AACA,aAFQ,MAEA;AACRD;AACA;;AAEA;AACAlI,sCADA;AAEA4F,wCAFA;AAGAC,0CAHA;AAIAT,gCAJA;AAKAD;AALA;AAOA;AACA;AACA;AACAiD;AACAA;AACAA;AACAA;AACAA;AACAA;AACA,gDAAwCA,UAAxC;AACK,WAzEL;AA0EAC;AACA;AAAA,gBACAC,kCADA;AAAA,gBAEAF,4BAFA;AAAA,gBAGAG,8BAHA;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA/G;AACAC;;AAEA;AACA;AACAD;AACA,mBAFA,MAEc;AACdC;AACA;AACA;AACA,eAXA,MAWU;AACV;AACAD;AACA,iBAFA,MAEY;AACZC;AACA,iBAFY,MAEA;AACZD;AACAC;;AAEA;AACAD;AACA,mBAFA,MAEc;AACdC;AACA;AACA;AACA;;AAEA;AACAzB,wCADA;AAEAoF,qCAFA;AAGAD;AAHA;;AAMA3D;AACAC;AACA2G;AACAA;AACAA;AACAA;AACA;;AAEA;AACA;AACA;AACA;AACAA;AACAA;AACAA;AACAA;;AAEA;AACAA;AACAA;AACAA;AACAA;;AAEA;AACA;AACAA;AACAA;AACA;;AAEA;AACAA;AACAA;AACA;AACA;AACA;AACA,eA1BA,MA0BU;AACVA;AACAA;AACAA;AACAA;AACA;AACA;AACK,WAnKL;AAoKAI;AACA;AAAA,gBACAP,0BADA;;AAGA;AACA;AACA7C,+EADA;AAEAD,iFAFA;AAGAE;AAHA;AAAA,kBAKAO,qCALA;AAAA,kBAMAC,uCANA;;AAQA;AACA;AACAuC;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEAA;AACAA;AACA;AACAA;AACAA;AACAA;AACAA;AACAL;AACA3C,qCADA;AAEAD;AAFA,eAGOsD;AACPtE,yCADO;AAEPC;AAFO,cAHP;AAOA;;AAEA;AACA;AACA;AACK,WAxNL;AAyNAsE;AACA;AAAA,gBACAT,0BADA;AAEA;AACA;AACAU;AACAvD,0BADA;AAEAD,4BAFA;AAGApB,kDAHA;AAIAC;AAJA;AAMA+D;AACA3C,oCADA;AAEAD;AAFA,eAGOsD;AACPtE,wCADO;AAEPC;AAFO,eAGA6D,SAHA,EAHP;;AAQA;AACA;AACA;AACK,WA/OL;AAgPAW;AACA;AAAA,gBACAR,4BADA;AAEA;AACA;AACA;AACAhD,qCADA;AAEAD;AAFA;;AAKA;AACA;AACAoD;AACA,eAFA,MAEU;AACVA;AACA;AACA;;AAEA;AACA,0CAnBA,CAmBqC;;AAErCA;AACAA,sHAtBA,CAsBiH;;AAEjHA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA,iDAAyCA,WAAzC;AACK,WA/QL;AAgRAM;AACA;AAAA,gBACAP,kCADA;AAAA,gBAEAF,4BAFA;AAAA,gBAGAG,8BAHA;AAAA,gBAIAO,sBAJA;AAKA;;AAEA;AACA;AACA;AACA;AACA,mMAJA,CAI8L;;AAE9LpH;AACAC;;AAEA;AACA;AACA;AACAA;AACA,mBAFA,MAEc;AACdD;AACA;AACA,iBANA,MAMY;AACZC;AACA,iBAFY,MAEA;AACZD;AACA;;AAEA;AACAqH;AACA,iBAFA,MAEY;AACZC;AACA;AACA,eA3BA,CA2BU;;;AAGVT;AACAA;AACAA;AACAA;AACA;;AAEA;AACA;AACAA;AACAA;AACAA;AACAA;AACA,eALA,MAKU;AACVA;AACAA;AACAA;AACAA;AACA;AACA;AACK,WAzUL;AA0UAU;AACA;AAAA,gBACAX,kCADA;AAAA,gBAEAC,8BAFA;;AAIA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEAA;AACAA;AACA;AACAA;AACAA;AACAA;AACAA;;AAEA;AACA;AACAW;AACA;;AAEAnB;AACA3C,sCADA;AAEAD;AAFA,eAGOsD;AACPtE,0CADO;AAEPC;AAFO,cAHP;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACK,WAnXL;AAoXA+E;AACA;AACAC;AACA;AAvXA;AA0XA;AACAC;AACA;AAAA,gBACAC,8BADA;AAEA;AACA;AACA;AACA;;AAEA;AACAC;AACA;;AAEAA;AACAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACAC;AACA,aAFA,MAEQ;AACRA;AACA;;AAEA;AACA/G;AACA,sDADA,CACiD;;AAEjDyG;AACA9D,qCADA;AAEAD,uCAFA;AAGAsE;AAHA;;AAMA;AACAC;AACA;;AAEAA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,qDAA2C,aAA3C,GAA2D,cAA3D,GAA4E,wBAA5E,GAAuG,yBAAvG,GAAmI,2BAAnI,GAAiK,4BAAjK,GAAgM,oCAAhM;AACAC;AACAA;AACO,aAzBP;AA0BK,WAzDL;AA0DAC;AACAnH;AACA;AACAsF;AACA3C,iCADA;AAEAD;AAFA;AAIAvC;AACAiH;AACO,aARP;AASK,WApEL;AAqEA3J;AACA;AAAA,gBACAkI,4BADA;AAAA,gBAEAG,8BAFA;AAGA;AAAA,gBACAuB,kCADA;AAEA;AAAA,gBACA3E,yBADA;AAEA;AACA;;AAEA;AACA;AACA;;AAEA4C;AACA3C,0BADA;AAEAD;AAFA,eAGOsD;AACPtE,+BADO;AAEPC;AAFO,eAGA6D,SAHA,EAHP;AAOAxF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAsH;AACAC;AACA;;AAEA;AACAD;AACAE;AACAD;AACA;;AAEAjC;AACA3C,+BADA;AAEAD;AAFA;AAIA4C;AACA3C,oCADA;AAEAD;AAFA,iBAGSsD;AACTtE,yCADS;AAETC;AAFS,iBAGA6D,SAHA,EAHT;AAOO,aA9BP;AA+BA;AA1HA;AA6HA;AACAiC;AACA;AAAA,gBACAtC,sBADA;AAAA,gBAEAE,sBAFA;;AAIA;AACAqC;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEAA;;AAEA;AACAA;AACAC,8BADA;AAEAC;AAFA;AAIA;;AAEA;AACAF;AACA;;AAEAA;AACAA;;AAEA;AACAA;AACA;AACK,WA7CL;AA8CAG;AACA;AAAA,gBACA1C,sBADA;AAAA,gBAEAE,sBAFA;;AAIA;AACAyC;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEAA;;AAEA;AACAA;AACAH,8BADA;AAEAC;AAFA;AAIA;;AAEA;AACAE;AACA;;AAEAA;AACAA;;AAEA;AACAA;AACA;AACA;AA1FA;AA6FA;AACAC;AACA;AACA;AACA;;AAEA;AAAA,gBACA3C,0BADA;AAAA,gBAEAS,kCAFA;AAGA,oEARA,CAQ+D;;AAE/D;AACA;AACA;;AAEA;AACAF;AACAG;AACA;;AAEA;;AAEA;AACA;AACAH;AACW,iBAFX;AAGA;AACAG;AACW,iBAFX;AAGA;AACA;AACK,WA/BL;AAgCAkC;AACA;AACA;AACA;;AAEA;AACK,WAtCL;AAuCAC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA/G,mCAVA,CAU8B;;AAE9B;AACA;AACA;;AAEA;AACAgH;AACAC;AACO,aAFP,EAEO,EAFP;;AAIA;AACAC;AACA,aAFA,MAEQ;AACRA;AACA,aAFQ,MAEA;AACRA;AACA;;AAEA;AACK,WArEL;AAsEAC;AACA;AAAA,gBACAC,qBADA;;AAGA;AAAA,eACA;AACAC;AAAA,eACArH,aAFA,CADA,EAGA;AACA;AACA;;AAEA;AAAA,gBACAc,wBADA;AAEA;;AAEA;AACA;AACAhC;AACAgC;AACS,eAFT;AAGA,aALA,MAKQ;AACR;AACAA;AACA;;AAEA;AACAwG;AACA,aAFA,MAEQ;AACRA;AACA;;AAEA;AACA;AACA;;AAEA;AACAC,kCADA;AAEAD;AAFA,mBAGO,KAHP,EAGO;AACP;AACA,aAxCA,CAwCQ;;;AAGRtH;AACA;AACA;;AAEA;AACA;AACAhB;AACA;AACK,WAzHL;AA0HAwI;AACA;;AAEA;AACA;AACA;;AAEA;AACAxH;;AAEA;AACAuH,kCADA;AAEAD;AAFA,mBAGO,KAHP,EAGO;AACP;AACA;;AAEA;AACAxI;AACA;AACAkG,yDAAiDyC,uBAAjD;AACS,eAHT;AAIA,aALA,MAKQ;AACRzC,2DAAmDyC,uBAAnD;AACA;;AAEA;AACK,WArJL;AAsJAC;AACA;AACA;AACA;;AAEA;AAAA,gBACA5G,wBADA;;AAGA;AACAhC;AACA;AACS,eAFT;AAGA,aAJA,MAIQ;AACR;AACA;;AAEA;AACA;AACA;;AAEAkB;;AAEA;AACA;AACA;;AAEA;AACA;AACAb;AACA;;AAEAsG;AACA8B,kCADA;AAEAD;AAFA;AAIA;AAzLA;AA4LA;AACAK;AACA;AAAA,gBACAlD,4BADA;AAAA,gBAEAE,kCAFA;AAAA,gBAGAC,8BAHA;AAAA,gBAIA9D,wBAJA;AAKA;AACA;AACA;AAAA,gBACAT,qBADA;AAAA,gBAEAoB,yBAFA;AAAA,gBAGAD,2BAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAnBA,CAmBkB;;AAElB;AACAnF;AACA;;AAEA;AACAuL;AACAC;AACApF;AACAE;AACA;;AAEA;AACA;AACAmF,8CADA;AAEAC;AAFA;;AAKA;AACA;AACA;AACA;AACAC;AACA;;AAEA;;AAEA;AACA;AACAA;AACA;;AAEA;;AAEA;AACA;AACAA;AACA;;AAEA;;AAEA;AACA;AACAA;AACA;;AAEA;AA3BA;AA6BA,aA9BA;;AAgCA;AACA;AACA;AACA5H;AACAC;AACA;AACA;;AAEA;AACA;AACA4H;AACA;AACA;;AAEAC;AACAzG;;AAEA;AACA6F;AACA7F;AACArB;AACA;;AAEA;AACAoB;AACAnB;AACA;;AAEA;;AAEA;AACA;AACA4H;AACA;AACA;;AAEAC;AACA1G;AACAnB;;AAEA;AACAiH;AACA9F;AACAnB;AACA;;AAEA;AACAoB;AACArB;AACA;;AAEA;;AAEA;AACA;AACA6H;AACA;AACA;;AAEAC;AACAzG;AACArB;;AAEA;AACAkH;AACA7F;AACArB;AACA;;AAEA;AACAoB;AACAnB;AACA;;AAEA;;AAEA;AACA;AACA4H;AACA;AACA;;AAEAC;AACA1G;;AAEA;AACA8F;AACA9F;AACAnB;AACA;;AAEA;AACAoB;AACArB;AACA;;AAEA;;AAEA;AACA;AACA;AACA6H;AACA;AACA;;AAEAC;AACA1G;AACAnB;AACAoB;AACA,iBAVA,MAUY;AACZyG;AACAA;;AAEA;AACA;AACAzG;AACA,qBAFA,MAEgB;AAChBwG;AACA;AACA,mBANA,MAMc;AACdxG;AACA;;AAEA;AACA;AACAD;AACAnB;AACA;AACA,mBALA,MAKc;AACdmB;AACAnB;AACA;AACA;;AAEA;AACAiH;AACA9F;AACAC;AACApB;AACAD;AACA,iBANA,MAMY;AACZkH;AACA7F;AACArB;AACA,iBAJY,MAIA;AACZkH;AACA9F;AACAnB;AACA;;AAEA;;AAEA;AACA;AACA;AACA4H;AACA;AACA;;AAEAC;AACA1G;AACAnB;AACAoB;AACArB;AACA,iBAXA,MAWY;AACZ8H;AACAA;;AAEA;AACA;AACAzG;AACArB;AACA,qBAHA,MAGgB;AAChB6H;AACA;AACA,mBAPA,MAOc;AACdxG;AACArB;AACA;;AAEA;AACA;AACAoB;AACAnB;AACA;AACA,mBALA,MAKc;AACdmB;AACAnB;AACA;AACA;;AAEA;AACAiH;AACA9F;AACAC;AACApB;AACAD;AACA,iBANA,MAMY;AACZkH;AACA7F;AACArB;AACA,iBAJY,MAIA;AACZkH;AACA9F;AACAnB;AACA;;AAEA;;AAEA;AACA;AACA;AACA4H;AACA;AACA;;AAEAC;AACAzG;AACArB;AACAoB;AACA,iBAVA,MAUY;AACZ0G;AACAA;;AAEA;AACA;AACAzG;AACArB;AACA,qBAHA,MAGgB;AAChB6H;AACA;AACA,mBAPA,MAOc;AACdxG;AACArB;AACA;;AAEA;AACA;AACAoB;AACA;AACA,mBAJA,MAIc;AACdA;AACA;AACA;;AAEA;AACA8F;AACA9F;AACAC;AACApB;AACAD;AACA,iBANA,MAMY;AACZkH;AACA7F;AACArB;AACA,iBAJY,MAIA;AACZkH;AACA9F;AACAnB;AACA;;AAEA;;AAEA;AACA;AACA;AACA4H;AACA;AACA;;AAEAC;AACAzG;AACAD;AACA,iBATA,MASY;AACZ0G;AACAA;;AAEA;AACA;AACAzG;AACA,qBAFA,MAEgB;AAChBwG;AACA;AACA,mBANA,MAMc;AACdxG;AACA;;AAEA;AACA;AACAD;AACA;AACA,mBAJA,MAIc;AACdA;AACA;AACA;;AAEA;AACA8F;AACA9F;AACAC;AACApB;AACAD;AACA,iBANA,MAMY;AACZkH;AACA7F;AACArB;AACA,iBAJY,MAIA;AACZkH;AACA9F;AACAnB;AACA;;AAEA;AACA;;AAEA;AACA;AACA4H;AACA;AACA;;AAEA;AACA;AACAA;AACA;AACA;;AAEA;AACA;AACAA;AACA;AACA;;AAEAxE;AACArD;AACAC;AACAoB;AACAD;;AAEA;AACA8F;AACA,iBAFA,MAEY;AACZlH;AACAkH;AACA;;AAEA;AACAjH;AACA,iBArBA,CAqBY;;;AAGZ;AACAnB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAxWA;;AA2WA;AACA0F;AACAA;AACAA;AACAA;AACA;AACA;AACA,aAxbA,CAwbQ;;;AAGR9F;AACAqJ;AACAA;AACO,aAHP;AAIA;AAhcA;AAmcA;AACA;AACA5J;AACA;AACA;AACA;;AAEA;AACAS;AACA;;AAEAE;AACA;AACA;;AAEA;AACK,WAhBL;AAiBA;AACAkJ;AACA;AACA,0CAAkC,qBAAlC;AACA,2CAAmC,sBAAnC;AACA,4CAAoC,uBAApC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACK,WA/BL;AAgCA;AACAC;AACA;AACArD;AACA5E,uBADA;AAEAC,sBAFA;AAGAoB,wBAHA;AAIAD;AAJA;AAMA;AACA;AACA,2CATA,CASsC;;AAEtC;AACAtC;AACAF;AACA;;AAEA;AACK,WAnDL;;AAqDA;AACA;AACA;AACA;AACA;AACA;AACAsJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACAxJ;AACAG;AACa,mBAFb;AAGA;AACA,eAVA,MAUU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACK,WAzFL;AA0FA;AACAsJ;AACA;AACA;AACArJ;AACA;;AAEA;AACK,WAlGL;AAmGA;AACAsJ;AACA;AACA;AACAxJ;AACA;;AAEA;AACK,WA3GL;;AA6GA;AACA;AACA;AACA;AACAyJ;AACA;;AAEA;AACA;AACA;;AAEAxJ;;AAEA;AACAA;AACA;;AAEA;AACA;AACK,WAhIL;;AAkIA;AACA;AACA;AACA;AACA;AACA;AACAyJ;AACA;AACA;AAAA,gBACAtI,4BADA;AAAA,gBAEAC,0BAFA;AAGA;AACK,WA9IL;;AAgJA;AACA;AACA;AACA;AACA;AACA;AACAsI;AACA;AACA;AACA;AACAb;AACAC;;AAEA;AACA;AACAtD;AACAmE;AACA;;AAEA;AACAnE;AACAmE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACK,WA9KL;;AAgLA;AACA;AACA;AACA;AACA;AACA;AACApK;AACA;AACA4H;;AAEA;AACAA;AACA,aAFA,MAEQ;AACRA;AACA;;AAEA;AACK,WAjML;;AAmMA;AACA;AACA;AACA;AACA;AACA;AACA;AACAyC;AACA;AAAA,gBACApE,4BADA;AAEA;AAAA,gBACAjD,0BADA;AAAA,gBAEAS,sCAFA;AAAA,gBAGAC,wCAHA;AAIAkE;;AAEA;AACA;AACA;;AAEA;AACAA,4BADA;AAEA0C,8CAFA;AAGAvB;AAHA,qBAIS,KAJT,EAIS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACAjG,6CADA;AAEAN;AAFA,kBAHA,CAMa;;AAEbyD;AACAA;AACA,eAVA,MAUU;AACVA;AACAA;AACA,eAHU,MAGA;AACV;AACAA;AACAA;AACA;;AAEAA;AACAA;AACA;AACA;;AAEA;AACK,WAxPL;;AA0PA;AACA;AACA;AACA;AACA;AACA3C;AACA;AACK,WAjQL;;AAmQA;AACA;AACA;AACA;AACA;AACAiH;AACArH;;AAEA;AACA;AACA;AACA;;AAEA;AACK,WAjRL;;AAmRA;AACA;AACA;AACA;AACA;AACApB;AACA;AACA;AACK,WA3RL;;AA6RA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;AACK,WArSL;;AAuSA;AACA;AACA;AACA;AACA;AACA;AACAyI;AACA;AACA;AACA;AACA1I;AACAC;;AAEA;AACA;AACA+D;AACA2E;AACA;;AAEA;AACA3E;AACA2E;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACK,WArUL;;AAuUA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;AAAA,gBACA5E,0BADA;AAAA,gBAEAG,4BAFA;AAAA,gBAGAG,8BAHA;AAIA;;AAEA;AACAtI;AACAwL,qDADA;AAEAC,mDAFA;AAGAtG,wCAHA;AAIAD;AAJA;AAMA;AACA1C;AACAxC;AACS,eAFT;;AAIA;AACA;AACA;AACA;AACA;AACAA;AACAA;AACAA;AACAA;AACA;AACA,aAtBA,MAsBQ;AACRA;AACAwL,oBADA;AAEAC,oBAFA;AAGAtG,wBAHA;AAIAD;AAJA;AAMA;;AAEA;AACAlF;AACA;;AAEA;AACAA;AACAA;AACA;;AAEA;AACK,WA7XL;;AA+XA;AACA;AACA;AACA;AACA;AACAiJ;AACA;AAAA,gBACAjB,0BADA;AAAA,gBAEAG,4BAFA;AAGA;;AAEA;AACA;;AAEA;AACA;AACAH;AACA2E;AACA;AACA;;AAEA;AACA;AACA3E;AACA2E;AACA;;AAEA;AACA3E;AACA2E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACArE;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACA;;AAEA;AACK,WA1bL;;AA4bA;AACA;AACA;AACA;AACAuE;AACA,2CAAmC,kBAAnC,IAAmC,EAAnC;AACK,WAlcL;;AAocA;AACA;AACA;AACA;AACAC;AACA,2CAAmC,cAAnC,IAAmC,EAAnC;AACK,WA1cL;;AA4cA;AACA;AACA;AACA;AACAC;AACA;AACA;;AAEA;AACAvK;AACAxC;AACS,eAFT;AAGA;;AAEA;AACK,WA3dL;;AA6dA;AACA;AACA;AACA;AACA;AACAgN;AACA;AACA;;AAEA;AACA;AACA7E;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACAA;AACA,eAHA,MAGU;AACVA;AACAA;AACA;;AAEA;AACA;;AAEA;AACK,WA3fL;;AA6fA;AACA;AACA;AACA;AACA8E;AACA;AACA;;AAEA;AACAjN;AACA8D,sCADA;AAEAC,oCAFA;AAGAoB,wCAHA;AAIAD;AAJA;AAMA;;AAEA;AACK,WA/gBL;;AAihBA;AACA;AACA;AACA;AACA;AACAgI;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA5E;AACA;;AAEA;AACAA;AACA;;AAEA;AACA6E;AACA7E;AACA;;AAEA;AACA8E;AACA9E;AACA;;AAEA;AACA;AACAA;AACA,iBAFA,MAEY;AACZA;AACA;AACA;;AAEA;AACA;;AAEA;AACK,WA3jBL;;AA6jBA;AACA;AACA;AACA;AACA;AACA+E;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0FARA,CAQqF;;AAErF;AACA;AACA;;AAEA;AAAA,gBACAC,0BADA;AAAA,gBAEAC,0BAFA;AAAA,gBAGAC,kCAHA;AAAA,gBAIAC,oCAJA;;AAMA;;AAEA;AACAH;AACAC;AACAC;AACAC;AACA;;AAEA;AACA;AACA1N,sCADA;AAEAoF,iDAFA;AAGAD;AAHA;AAKA;AACAnF,sCADA;AAEAoF,0CAFA;AAGAD;AAHA,eAIO,OAJP;;AAMA;AACAnF,sCADA;AAEAoF,iFAFA;AAGAD;AAHA;AAAA,gBAKAC,+BALA;AAAA,gBAMAD,iCANA;;AAQAC;AACAD;AACA;AACA;AACAwB;AACAA;AACAC;AACAA;AACA;AAAA,gBACAZ,uFADA;AAAA,gBAEAE,qDAFA;AAGAU;;AAEA;AACAA;AACA,aAhEA,CAgEQ;;;AAGR;AACA,6CApEA,CAoEwC;;AAExC;AACA;AACA;AACA,0BAzEA,CAyEqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA+G;AACAC;AACAC;AACAC;AACA,aALA,MAKQ;AACRD;AACAF;AACAC;AACAE;AACA,aALQ,MAKA;AACRD;AACAD;AACAE;AACA;;AAEA;AACAC;AACAC;AACAC;AACAC;AACA,aALA,MAKQ;AACRD;AACAF;AACAC;AACAE;AACA,aALQ,MAKA;AACRD;AACAD;AACAE;AACA;;AAEA,2DAhHA,CAgHsD;;AAEtD;AACA;AACAC;AACA,aArHA,CAqHQ;AACR;;;AAGAvH;AACA;AACO,aAFP;AAGA;AACK,WA/rBL;;AAisBA;AACA;AACA;AACA;AACA;AACAwH;AACA;;AAEA;AACA;AACAxG;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACK,WAvtBL;;AAytBA;AACA;AACA;AACA;AACA;AACAyG;AACA;AAAA,gBACAC,sBADA;AAAA,gBAEAC,gBAFA;;AAIA;AACA;AACA;AACAC;AACA5G;AACAsB;AACApG;AACAA;;AAEA;AACA;AACAoG;AACApG;AACAA;AACA;AACA;;AAEA;AACA;AArvBA;AAwvBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA2L;;AAEA;AACA;AACA;;AAEA;AACA,sCAA8BC,QAA9B,EAA8BC,iCAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC;AACAC,uBADA;AAEAzP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEAwD;;AAEA;AACA,kCADA,CAC6B;;AAE7BkM;AACA,uCAJA,CAIkC;;AAElC;AACA;AACA,iBARA,CAQY;;;AAGZA;AACA,eAZA,MAYU;AACVA;AACA;;AAEA;AACA;AA9BA,aA+BK;AACLD,uBADK;AAELzP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA,kBACAwI,sBADA;;AAGA;AACAA;AACA,eAdA,CAcU;;;AAGV;AACA;AACA;AACA,eApBA,CAoBU;;;AAGV;AACA;AACA;AACA;AACA,iBAFA,MAEY;AACZ;AACA;AACA;AACA;;AAEA;AACA,eAlCA,CAkCU;AACV;;;AAGA;AACA;AACA;AACA,6BAzCA,CAyCwB;AACxB;AACA;AACA;;AAEAmH;AACAA;AACAA;;AAEAA;AACA;AACA;AACAA;AACA;AACA,eALA;;AAOAA;AACAnE;AACA,eAFA;;AAIAmE;AACAnE;AACAA;AACA,eAHA,CA7DA,CAgEW;;;AAGX;AACAkE;AACA;;AAEAC;AACAA;AACAA;AACAA;AACA;AA7EK,WA/BL,EA6GK;AACLF,uBADK;AAELzP;AACA;AAAA,kBACA6I,0BADA,CADA,CAEwC;AACxC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEAxC;AACAxB;AACAC;AACA;;AAEA;AACA+D;AACA;;AAEA;AACAA;AACAA;AACA;;AAEA;AACA;AAjCK,WA7GL,EA+IK;AACL4G,wBADK;AAELzP;AACA;AAAA,kBACA0P,cADA;AAEA;AACA;;AAEA;AACA;AACAxF;AACA,iBAHA,CAGY;;;AAGZ0F;AACA;;AAEA;AACA;AACA;;AAEA;AACAzF;AACA;;AAEAA;AACAA;AACA;AACAA;AACAA;AACA5G;AACAC;AACA;AAhCK,WA/IL,EAgLK;AACLiM,wBADK;AAELzP;AACA;;AAEA;AACAmK;AACAA;AACA,iCANA,CAM4B;AAC5B;;AAEA;;AAEA;AACAZ;AACA/C,4CADA;AAEAC,8CAFA;AAGA7F;AAHA;AAKAiP,qDAA6CA,gBAA7C;AACAA;AACAA;;AAEAA;AACA,eAXA,CAXA,CAsBW;;;AAGX;AACAC;AACA;AACA;;AAEA;AACA;AACA;;AAEAC;AACAD;;AAEA;AACAE;AACA;AACA,eANA;;AAQAD,0CA1CA,CA0CqC;AACrC;;AAEA;AACAA,wDAA8C,4BAA9C,GAA6E,2BAA7E,GAA2G,yBAA3G,GAAuI,wBAAvI,GAAkK,YAAlK,GAAiL,oBAAjL,GAAwM,QAAxM,GAAmN,aAAnN;AACAC;AACA;AACA;AAnDK,WAhLL,EAoOK;AACLP,uBADK;AAELzP;AACA;AACAmK;AACAA;AACAA;AACA;AACA;AARK,WApOL,EA6OK;AACLsF,wBADK;AAELzP;AACA;AACA;AACA;;AAEA;AAAA,kBACAwI,sBADA;AAAA,kBAEA2B,kBAFA,CALA,CAOgC;;AAEhC;AACA;AACA8F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1I,wCAxBA,CAwBmC;;AAEnChE,8CA1BA,CA0ByC;;AAEzCkF,mEA5BA,CA4B8D;;AAE9D;AACAhF;AACA;;AAEA;AACA;AACA+E;AACAA;AACAA;AACAjF;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACAA;AACAuG;AACA;;AAEA;AACAvG;AACAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACAwH;AACAjH;AADA;AAGA;;AAEAkG;AACA;AAtFK,WA7OL,EAoUK;AACLyF,0BADK;AAELzP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACAyD;AACA;AAZK,WApUL,EAiVK;AACLgM,2BADK;AAELzP;AACA;AACA;AACA;AACA;AACA,eAJA,MAIU;AACV;AACA;AACA;AACA,eAJU,MAIA;AACV;AACA;AACA,eAHU,MAGA;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AArBK,WAjVL,GAwWK;AACLyP,6BADK;AAELzP;AACAkQ;AACA;AACA;AACA;AACA;AACA;AACA;;AATK,aAWA;AACLT,8BADK;AAELzP;AACAuJ;AACA;AAJK,WAXA,CAxWL;;AA0XA;AACG,SAvZH;;AAyZAA;AAEA;AAEC,OA7hHD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA,UAAM4G,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAEC;AAFb,OADqB,CAAvB;;UAWaC,8BAA6B;AAAA;AAAA;;AAA7BA,oCAA6B,uDAJzC,yDAAS;AACRC,eAAO,EAAE,CAACC,mEAAsBN,MAAtB,CAAD,CADD;AAERO,eAAO,EAAE,CAACD,yDAAD;AAFD,OAAT,CAIyC,GAA7BF,8BAA6B,CAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCGAI,uBAAsB;AAAA;AAAA;;AAAtBA,6BAAsB,uDATlC,yDAAS;AACRH,eAAO,EAAE,CACPI,yDADO,EAEPC,uDAFO,EAGPC,uDAHO,EAIPC,wFAJO,CADD;AAORC,oBAAY,EAAE,CAACC,iEAAD;AAPN,OAAT,CASkC,GAAtBN,uBAAsB,CAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCVAO,iBAAgB;AAW3B,kCACU/P,KADV,EAESgQ,SAFT,EAGUC,OAHV,EAIUC,KAJV,EAIgC;AAAA;;AAHtB;AACD;AACC;AACA;AACR,eAAKC,gBAAL,GAAwB,KAAKC,oBAA7B;AACAC,iBAAO,CAACC,GAAR,CAAY,KAAKF,oBAAjB;AACH;;AAlB4B;AAAA;AAAA,iBAoBtB,2BAAe;AAAA;;AACpB,iBAAK7I,OAAL,GAAe,KAAIgJ,gDAAJ,EAAY,KAAKC,YAAL,CAAkBC,aAA9B,EAA6C;AACxD/P,sBAAQ,EAAE,IAD8C;AAExDV,mBAAK,EAAE,IAFiD;AAGxDS,sBAAQ,EAAE,IAH8C;AAIxDhB,yBAAW,EAAE,CAJ2C;AAKxD;AACAoB,4BAAc,EAAE,GANwC;AAOxDvB,sBAAQ,EAAE,CAP8C;AAQxDY,oBAAM,EAAE,IARgD;AASxD;AACAK,qBAAO,EAAE,IAV+C;AAWxDc,+BAAiB,EAAE0N,MAAM,CAAC2B,UAX8B;AAYxDpP,gCAAkB,EAAE,GAZoC;AAaxDX,yBAAW,EAAE,IAb2C;AAcxDC,yBAAW,EAAE,IAd2C;AAexDe,kBAAI,EAAE,gBAAK;AACP,oBAAMyE,MAAM,GAAG,MAAI,CAACmB,OAAL,CAAawF,gBAAb,EAAf;;AACA,sBAAI,CAACoD,gBAAL,GAAwB/J,MAAM,CAACuK,SAAP,CAAiB,WAAjB,EAA8B,GAA9B,CAAxB;AACH,eAlBuD;AAmBxDjP,qBAAO,EAAE,mBAAK;AACZ2O,uBAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;AArBuD,aAA7C,CAAf;AAuBD;AA5C4B;AAAA;AAAA,iBA8CtB,oBAAQ;AACb,gBAAIM,gBAAgB,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,mBAAhC,CAAvB;AACAT,mBAAO,CAACC,GAAR,CAAYM,gBAAgB,CAACG,IAAjB,CAAsB,CAAtB,CAAZ;AAEAhC,kBAAM,CAACiC,gBAAP,CAAwB,YAAxB,EAAsC,UAACC,CAAD,EAAM;AAC1CZ,qBAAO,CAACC,GAAR,CAAYW,CAAZ;AACAA,eAAC,CAACC,eAAF;AACAD,eAAC,CAACE,cAAF,GAH0C,CAGtB;AACrB,aAJD;AAKAd,mBAAO,CAACC,GAAR,CAAY,KAAKF,oBAAjB;AACA,iBAAKgB,gBAAL,GAAwB,KAAKhB,oBAA7B,CAVa,CAYb;AACA;;AACAhG,sBAAU,CAAC,YAAK;AACd,kBAAIiH,aAAa,GAAGR,QAAQ,CAACC,sBAAT,CAAgC,gBAAhC,CAApB;AACAT,qBAAO,CAACC,GAAR,CAAYe,aAAZ,EAFc,CAGd;AACA;AACD,aALS,EAKP,CALO,CAAV;AAMD;AAlE4B;AAAA;AAAA,iBAoE3B,gBAAI;AACF,iBAAKrR,KAAL,CAAWsR,OAAX;AACD;AAtE0B;AAAA;AAAA,iBAwE3B,cAAKnB,gBAAL,EAAqB;AACnBE,mBAAO,CAACC,GAAR,CAAY,UAAZ;AACA,iBAAKtQ,KAAL,CAAWsR,OAAX,CACEnB,gBADF;AAID;AA9E0B;;AAAA;AAAA;;;;gBAPpBoB;;gBAAiBA;;gBAAWA;;gBAAmBA;;;;;;gBASrDC;AAASxP,iBAAC,OAAD,EAAU;AAAE,sBAAQ;AAAV,WAAV;;;gBAGTwP;AAAKxP,iBAAC,sBAAD;;;AALK+N,uBAAgB,uDAL5B,0DAAU;AACT0B,gBAAQ,EAAE,mBADD;AAET3C,iLAFS;;AAAA,OAAV,CAK4B,2EAYVyC,6DACGA,uDACDA,+DACFA,6DAfU,GAAhBxB,iBAAgB,CAAhB;;;;;;;;;;;;;;;ACTb;;;AAAA2B,uCAAe,0zCAAf;;;;;;;;;;;;;;;;;","names":["module","_typeof","i","descriptor","Object","value","enumerable","configurable","writable","obj","keys","ownKeys","_defineProperty","arr2","viewMode","dragMode","initialAspectRatio","aspectRatio","data","preview","responsive","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","minContainerWidth","minContainerHeight","ready","cropstart","cropmove","cropend","crop","zoom","toArray","callback","_key","args","target","forEach","style","addClass","element","removeClass","toggleClass","get","supported","set","once","WINDOW","type","handler","listeners","_element$listeners","_handler","_key2","listener","event","detail","bubbles","cancelable","left","top","scaleX","scaleY","translateX","translateY","values","WebkitTransform","msTransform","transform","pointers","maxRatio","pageY","endX","endY","startX","startY","end","pageX","count","height","width","degree","imageNaturalWidth","imageNaturalHeight","_ref6$rotate","rotate","_ref6$scaleX","_ref6$scaleY","naturalWidth","naturalHeight","fillColor","_ref8$imageSmoothingE","imageSmoothingEnabled","_ref8$imageSmoothingQ","imageSmoothingQuality","_ref8$maxWidth","maxWidth","_ref8$maxHeight","maxHeight","_ref8$minWidth","minWidth","_ref8$minHeight","minHeight","canvas","context","length","str","uint8","chunks","concat","btoa","app1Start","offset","littleEndian","ifdStart","_offset","orientation","dataView","render","initContainer","options","container","cropper","setStyle","initCanvas","imageData","canvasWidth","canvasHeight","canvasData","limitCanvas","containerData","cropBoxData","renderCanvas","getTransforms","renderImage","assign","initCropBox","limitCropBox","limited","maxCropBoxHeight","maxCropBoxWidth","renderCropBox","setData","output","dispatchEvent","initPreview","crossOrigin","image","previews","html","img","el","resetPreview","removeData","cropBoxHeight","ratio","newHeight","newWidth","bind","addListener","passive","capture","unbind","removeListener","resize","dblclick","wheel","setTimeout","_this","delta","cropStart","button","isNumber","action","originalEvent","cropMove","getPointer","cropEnd","change","minLeft","minTop","x","y","range","renderable","check","p","reset","clear","replace","enable","disable","destroy","move","moveTo","changed","zoomTo","oldRatio","rotateTo","scale","transformed","getData","getContainerData","getImageData","getCanvasData","setCanvasData","getCropBoxData","setCropBoxData","widthChanged","heightChanged","getCroppedCanvas","initialX","initialY","initialWidth","initialHeight","srcX","srcWidth","dstX","dstWidth","srcY","srcHeight","dstY","dstHeight","params","setAspectRatio","setDragMode","dragBox","face","mode","_classCallCheck","DEFAULTS","isPlainObject","_createClass","key","url","xhr","crossOriginUrl","_this2","done","sizingImage","body","template","window","routes","path","component","_image_cropper_page__WEBPACK_IMPORTED_MODULE_0__","ImageCropperPageRoutingModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_3__","exports","ImageCropperPageModule","_angular_common__WEBPACK_IMPORTED_MODULE_4__","_angular_forms__WEBPACK_IMPORTED_MODULE_5__","_ionic_angular__WEBPACK_IMPORTED_MODULE_6__","_image_cropper_routing_module__WEBPACK_IMPORTED_MODULE_0__","declarations","_image_cropper_page__WEBPACK_IMPORTED_MODULE_1__","ImageCropperPage","navParams","loading","toast","imageDestination","imageFromProfilePage","console","log","cropperjs__WEBPACK_IMPORTED_MODULE_2___default","imageElement","nativeElement","innerWidth","toDataURL","cropperContainer","document","getElementsByClassName","item","addEventListener","e","stopPropagation","preventDefault","uploadedPhotoURL","cropperCanvas","dismiss","_ionic_angular__WEBPACK_IMPORTED_MODULE_3__","_angular_core__WEBPACK_IMPORTED_MODULE_4__","selector","__webpack_exports__"],"sources":["webpack:///node_modules/cropperjs/dist/cropper.js","webpack:///src/app/modals/image-cropper/image-cropper-routing.module.ts","webpack:///src/app/modals/image-cropper/image-cropper.module.ts","webpack:///src/app/modals/image-cropper/image-cropper.page.ts","webpack:///src/app/modals/image-cropper/image-cropper.page.html"],"sourcesContent":["/*!\n * Cropper.js v1.5.9\n * https://fengyuanchen.github.io/cropperjs\n *\n * Copyright 2015-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2020-09-10T13:16:26.743Z\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Cropper = factory());\n}(this, (function () { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  var WINDOW = IS_BROWSER ? window : {};\n  var IS_TOUCH_DEVICE = IS_BROWSER && WINDOW.document.documentElement ? 'ontouchstart' in WINDOW.document.documentElement : false;\n  var HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;\n  var NAMESPACE = 'cropper'; // Actions\n\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw'; // Classes\n\n  var CLASS_CROP = \"\".concat(NAMESPACE, \"-crop\");\n  var CLASS_DISABLED = \"\".concat(NAMESPACE, \"-disabled\");\n  var CLASS_HIDDEN = \"\".concat(NAMESPACE, \"-hidden\");\n  var CLASS_HIDE = \"\".concat(NAMESPACE, \"-hide\");\n  var CLASS_INVISIBLE = \"\".concat(NAMESPACE, \"-invisible\");\n  var CLASS_MODAL = \"\".concat(NAMESPACE, \"-modal\");\n  var CLASS_MOVE = \"\".concat(NAMESPACE, \"-move\"); // Data keys\n\n  var DATA_ACTION = \"\".concat(NAMESPACE, \"Action\");\n  var DATA_PREVIEW = \"\".concat(NAMESPACE, \"Preview\"); // Drag modes\n\n  var DRAG_MODE_CROP = 'crop';\n  var DRAG_MODE_MOVE = 'move';\n  var DRAG_MODE_NONE = 'none'; // Events\n\n  var EVENT_CROP = 'crop';\n  var EVENT_CROP_END = 'cropend';\n  var EVENT_CROP_MOVE = 'cropmove';\n  var EVENT_CROP_START = 'cropstart';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';\n  var EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';\n  var EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';\n  var EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;\n  var EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;\n  var EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;\n  var EVENT_READY = 'ready';\n  var EVENT_RESIZE = 'resize';\n  var EVENT_WHEEL = 'wheel';\n  var EVENT_ZOOM = 'zoom'; // Mime types\n\n  var MIME_TYPE_JPEG = 'image/jpeg'; // RegExps\n\n  var REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;\n  var REGEXP_DATA_URL = /^data:/;\n  var REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n  var REGEXP_TAG_NAME = /^img|canvas$/i; // Misc\n  // Inspired by the default width and height of a canvas element.\n\n  var MIN_CONTAINER_WIDTH = 200;\n  var MIN_CONTAINER_HEIGHT = 100;\n\n  var DEFAULTS = {\n    // Define the view mode of the cropper\n    viewMode: 0,\n    // 0, 1, 2, 3\n    // Define the dragging mode of the cropper\n    dragMode: DRAG_MODE_CROP,\n    // 'crop', 'move' or 'none'\n    // Define the initial aspect ratio of the crop box\n    initialAspectRatio: NaN,\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n    // An object with the previous cropping result data\n    data: null,\n    // A selector for adding extra containers to preview\n    preview: '',\n    // Re-render the cropper when resize the window\n    responsive: true,\n    // Restore the cropped area after resize the window\n    restore: true,\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n    // Show the black modal\n    modal: true,\n    // Show the dashed lines for guiding\n    guides: true,\n    // Show the center indicator for guiding\n    center: true,\n    // Show the white modal to highlight the crop box\n    highlight: true,\n    // Show the grid background\n    background: true,\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n    // Enable to move the image\n    movable: true,\n    // Enable to rotate the image\n    rotatable: true,\n    // Enable to scale the image\n    scalable: true,\n    // Enable to zoom the image\n    zoomable: true,\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n    // Enable to move the crop box\n    cropBoxMovable: true,\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: MIN_CONTAINER_WIDTH,\n    minContainerHeight: MIN_CONTAINER_HEIGHT,\n    // Shortcuts of events\n    ready: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  var TEMPLATE = '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\n\n  /**\n   * Check if the given value is not a number.\n   */\n\n  var isNaN = Number.isNaN || WINDOW.isNaN;\n  /**\n   * Check if the given value is a number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n   */\n\n  function isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n  }\n  /**\n   * Check if the given value is a positive number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.\n   */\n\n  var isPositiveNumber = function isPositiveNumber(value) {\n    return value > 0 && value < Infinity;\n  };\n  /**\n   * Check if the given value is undefined.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n   */\n\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n  /**\n   * Check if the given value is an object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n   */\n\n  function isObject(value) {\n    return _typeof(value) === 'object' && value !== null;\n  }\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /**\n   * Check if the given value is a plain object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n   */\n\n  function isPlainObject(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n\n    try {\n      var _constructor = value.constructor;\n      var prototype = _constructor.prototype;\n      return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Check if the given value is a function.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n   */\n\n  function isFunction(value) {\n    return typeof value === 'function';\n  }\n  var slice = Array.prototype.slice;\n  /**\n   * Convert array-like or iterable object to an array.\n   * @param {*} value - The value to convert.\n   * @returns {Array} Returns a new array.\n   */\n\n  function toArray(value) {\n    return Array.from ? Array.from(value) : slice.call(value);\n  }\n  /**\n   * Iterate the given data.\n   * @param {*} data - The data to iterate.\n   * @param {Function} callback - The process function for each element.\n   * @returns {*} The original data.\n   */\n\n  function forEach(data, callback) {\n    if (data && isFunction(callback)) {\n      if (Array.isArray(data) || isNumber(data.length)\n      /* array-like */\n      ) {\n          toArray(data).forEach(function (value, key) {\n            callback.call(data, value, key, data);\n          });\n        } else if (isObject(data)) {\n        Object.keys(data).forEach(function (key) {\n          callback.call(data, data[key], key, data);\n        });\n      }\n    }\n\n    return data;\n  }\n  /**\n   * Extend the given object.\n   * @param {*} target - The target object to extend.\n   * @param {*} args - The rest objects for merging to the target object.\n   * @returns {Object} The extended object.\n   */\n\n  var assign = Object.assign || function assign(target) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (isObject(target) && args.length > 0) {\n      args.forEach(function (arg) {\n        if (isObject(arg)) {\n          Object.keys(arg).forEach(function (key) {\n            target[key] = arg[key];\n          });\n        }\n      });\n    }\n\n    return target;\n  };\n  var REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\n  /**\n   * Normalize decimal number.\n   * Check out {@link https://0.30000000000000004.com/}\n   * @param {number} value - The value to normalize.\n   * @param {number} [times=100000000000] - The times for normalizing.\n   * @returns {number} Returns the normalized number.\n   */\n\n  function normalizeDecimalNumber(value) {\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n  }\n  var REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;\n  /**\n   * Apply styles to the given element.\n   * @param {Element} element - The target element.\n   * @param {Object} styles - The styles for applying.\n   */\n\n  function setStyle(element, styles) {\n    var style = element.style;\n    forEach(styles, function (value, property) {\n      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n        value = \"\".concat(value, \"px\");\n      }\n\n      style[property] = value;\n    });\n  }\n  /**\n   * Check if the given element has a special class.\n   * @param {Element} element - The element to check.\n   * @param {string} value - The class to search.\n   * @returns {boolean} Returns `true` if the special class was found.\n   */\n\n  function hasClass(element, value) {\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n  }\n  /**\n   * Add classes to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be added.\n   */\n\n  function addClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        addClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.add(value);\n      return;\n    }\n\n    var className = element.className.trim();\n\n    if (!className) {\n      element.className = value;\n    } else if (className.indexOf(value) < 0) {\n      element.className = \"\".concat(className, \" \").concat(value);\n    }\n  }\n  /**\n   * Remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be removed.\n   */\n\n  function removeClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        removeClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.remove(value);\n      return;\n    }\n\n    if (element.className.indexOf(value) >= 0) {\n      element.className = element.className.replace(value, '');\n    }\n  }\n  /**\n   * Add or remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be toggled.\n   * @param {boolean} added - Add only.\n   */\n\n  function toggleClass(element, value, added) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        toggleClass(elem, value, added);\n      });\n      return;\n    } // IE10-11 doesn't support the second parameter of `classList.toggle`\n\n\n    if (added) {\n      addClass(element, value);\n    } else {\n      removeClass(element, value);\n    }\n  }\n  var REGEXP_CAMEL_CASE = /([a-z\\d])([A-Z])/g;\n  /**\n   * Transform the given string from camelCase to kebab-case\n   * @param {string} value - The value to transform.\n   * @returns {string} The transformed value.\n   */\n\n  function toParamCase(value) {\n    return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();\n  }\n  /**\n   * Get data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to get.\n   * @returns {string} The data value.\n   */\n\n  function getData(element, name) {\n    if (isObject(element[name])) {\n      return element[name];\n    }\n\n    if (element.dataset) {\n      return element.dataset[name];\n    }\n\n    return element.getAttribute(\"data-\".concat(toParamCase(name)));\n  }\n  /**\n   * Set data to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to set.\n   * @param {string} data - The data value.\n   */\n\n  function setData(element, name, data) {\n    if (isObject(data)) {\n      element[name] = data;\n    } else if (element.dataset) {\n      element.dataset[name] = data;\n    } else {\n      element.setAttribute(\"data-\".concat(toParamCase(name)), data);\n    }\n  }\n  /**\n   * Remove data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to remove.\n   */\n\n  function removeData(element, name) {\n    if (isObject(element[name])) {\n      try {\n        delete element[name];\n      } catch (error) {\n        element[name] = undefined;\n      }\n    } else if (element.dataset) {\n      // #128 Safari not allows to delete dataset property\n      try {\n        delete element.dataset[name];\n      } catch (error) {\n        element.dataset[name] = undefined;\n      }\n    } else {\n      element.removeAttribute(\"data-\".concat(toParamCase(name)));\n    }\n  }\n  var REGEXP_SPACES = /\\s\\s*/;\n\n  var onceSupported = function () {\n    var supported = false;\n\n    if (IS_BROWSER) {\n      var once = false;\n\n      var listener = function listener() {};\n\n      var options = Object.defineProperty({}, 'once', {\n        get: function get() {\n          supported = true;\n          return once;\n        },\n\n        /**\n         * This setter can fix a `TypeError` in strict mode\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n         * @param {boolean} value - The value to set\n         */\n        set: function set(value) {\n          once = value;\n        }\n      });\n      WINDOW.addEventListener('test', listener, options);\n      WINDOW.removeEventListener('test', listener, options);\n    }\n\n    return supported;\n  }();\n  /**\n   * Remove event listener from the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n\n\n  function removeListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (!onceSupported) {\n        var listeners = element.listeners;\n\n        if (listeners && listeners[event] && listeners[event][listener]) {\n          handler = listeners[event][listener];\n          delete listeners[event][listener];\n\n          if (Object.keys(listeners[event]).length === 0) {\n            delete listeners[event];\n          }\n\n          if (Object.keys(listeners).length === 0) {\n            delete element.listeners;\n          }\n        }\n      }\n\n      element.removeEventListener(event, handler, options);\n    });\n  }\n  /**\n   * Add event listener to the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n\n  function addListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (options.once && !onceSupported) {\n        var _element$listeners = element.listeners,\n            listeners = _element$listeners === void 0 ? {} : _element$listeners;\n\n        _handler = function handler() {\n          delete listeners[event][listener];\n          element.removeEventListener(event, _handler, options);\n\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          listener.apply(element, args);\n        };\n\n        if (!listeners[event]) {\n          listeners[event] = {};\n        }\n\n        if (listeners[event][listener]) {\n          element.removeEventListener(event, listeners[event][listener], options);\n        }\n\n        listeners[event][listener] = _handler;\n        element.listeners = listeners;\n      }\n\n      element.addEventListener(event, _handler, options);\n    });\n  }\n  /**\n   * Dispatch event on the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Object} data - The additional event data.\n   * @returns {boolean} Indicate if the event is default prevented or not.\n   */\n\n  function dispatchEvent(element, type, data) {\n    var event; // Event and CustomEvent on IE9-11 are global objects, not constructors\n\n    if (isFunction(Event) && isFunction(CustomEvent)) {\n      event = new CustomEvent(type, {\n        detail: data,\n        bubbles: true,\n        cancelable: true\n      });\n    } else {\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent(type, true, true, data);\n    }\n\n    return element.dispatchEvent(event);\n  }\n  /**\n   * Get the offset base on the document.\n   * @param {Element} element - The target element.\n   * @returns {Object} The offset data.\n   */\n\n  function getOffset(element) {\n    var box = element.getBoundingClientRect();\n    return {\n      left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n      top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n    };\n  }\n  var location = WINDOW.location;\n  var REGEXP_ORIGINS = /^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i;\n  /**\n   * Check if the given URL is a cross origin URL.\n   * @param {string} url - The target URL.\n   * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n   */\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(REGEXP_ORIGINS);\n    return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n  }\n  /**\n   * Add timestamp to the given URL.\n   * @param {string} url - The target URL.\n   * @returns {string} The result URL.\n   */\n\n  function addTimestamp(url) {\n    var timestamp = \"timestamp=\".concat(new Date().getTime());\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n  }\n  /**\n   * Get transforms base on the given object.\n   * @param {Object} obj - The target object.\n   * @returns {string} A string contains transform values.\n   */\n\n  function getTransforms(_ref) {\n    var rotate = _ref.rotate,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        translateX = _ref.translateX,\n        translateY = _ref.translateY;\n    var values = [];\n\n    if (isNumber(translateX) && translateX !== 0) {\n      values.push(\"translateX(\".concat(translateX, \"px)\"));\n    }\n\n    if (isNumber(translateY) && translateY !== 0) {\n      values.push(\"translateY(\".concat(translateY, \"px)\"));\n    } // Rotate should come first before scale to match orientation transform\n\n\n    if (isNumber(rotate) && rotate !== 0) {\n      values.push(\"rotate(\".concat(rotate, \"deg)\"));\n    }\n\n    if (isNumber(scaleX) && scaleX !== 1) {\n      values.push(\"scaleX(\".concat(scaleX, \")\"));\n    }\n\n    if (isNumber(scaleY) && scaleY !== 1) {\n      values.push(\"scaleY(\".concat(scaleY, \")\"));\n    }\n\n    var transform = values.length ? values.join(' ') : 'none';\n    return {\n      WebkitTransform: transform,\n      msTransform: transform,\n      transform: transform\n    };\n  }\n  /**\n   * Get the max ratio of a group of pointers.\n   * @param {string} pointers - The target pointers.\n   * @returns {number} The result ratio.\n   */\n\n  function getMaxZoomRatio(pointers) {\n    var pointers2 = _objectSpread2({}, pointers);\n\n    var maxRatio = 0;\n    forEach(pointers, function (pointer, pointerId) {\n      delete pointers2[pointerId];\n      forEach(pointers2, function (pointer2) {\n        var x1 = Math.abs(pointer.startX - pointer2.startX);\n        var y1 = Math.abs(pointer.startY - pointer2.startY);\n        var x2 = Math.abs(pointer.endX - pointer2.endX);\n        var y2 = Math.abs(pointer.endY - pointer2.endY);\n        var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n        var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n        var ratio = (z2 - z1) / z1;\n\n        if (Math.abs(ratio) > Math.abs(maxRatio)) {\n          maxRatio = ratio;\n        }\n      });\n    });\n    return maxRatio;\n  }\n  /**\n   * Get a pointer from an event object.\n   * @param {Object} event - The target event object.\n   * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n   * @returns {Object} The result pointer contains start and/or end point coordinates.\n   */\n\n  function getPointer(_ref2, endOnly) {\n    var pageX = _ref2.pageX,\n        pageY = _ref2.pageY;\n    var end = {\n      endX: pageX,\n      endY: pageY\n    };\n    return endOnly ? end : _objectSpread2({\n      startX: pageX,\n      startY: pageY\n    }, end);\n  }\n  /**\n   * Get the center point coordinate of a group of pointers.\n   * @param {Object} pointers - The target pointers.\n   * @returns {Object} The center point coordinate.\n   */\n\n  function getPointersCenter(pointers) {\n    var pageX = 0;\n    var pageY = 0;\n    var count = 0;\n    forEach(pointers, function (_ref3) {\n      var startX = _ref3.startX,\n          startY = _ref3.startY;\n      pageX += startX;\n      pageY += startY;\n      count += 1;\n    });\n    pageX /= count;\n    pageY /= count;\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n  /**\n   * Get the max sizes in a rectangle under the given aspect ratio.\n   * @param {Object} data - The original sizes.\n   * @param {string} [type='contain'] - The adjust type.\n   * @returns {Object} The result sizes.\n   */\n\n  function getAdjustedSizes(_ref4) // or 'cover'\n  {\n    var aspectRatio = _ref4.aspectRatio,\n        height = _ref4.height,\n        width = _ref4.width;\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\n    var isValidWidth = isPositiveNumber(width);\n    var isValidHeight = isPositiveNumber(height);\n\n    if (isValidWidth && isValidHeight) {\n      var adjustedWidth = height * aspectRatio;\n\n      if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\n        height = width / aspectRatio;\n      } else {\n        width = height * aspectRatio;\n      }\n    } else if (isValidWidth) {\n      height = width / aspectRatio;\n    } else if (isValidHeight) {\n      width = height * aspectRatio;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Get the new sizes of a rectangle after rotated.\n   * @param {Object} data - The original sizes.\n   * @returns {Object} The result sizes.\n   */\n\n  function getRotatedSizes(_ref5) {\n    var width = _ref5.width,\n        height = _ref5.height,\n        degree = _ref5.degree;\n    degree = Math.abs(degree) % 180;\n\n    if (degree === 90) {\n      return {\n        width: height,\n        height: width\n      };\n    }\n\n    var arc = degree % 90 * Math.PI / 180;\n    var sinArc = Math.sin(arc);\n    var cosArc = Math.cos(arc);\n    var newWidth = width * cosArc + height * sinArc;\n    var newHeight = width * sinArc + height * cosArc;\n    return degree > 90 ? {\n      width: newHeight,\n      height: newWidth\n    } : {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n  /**\n   * Get a canvas which drew the given image.\n   * @param {HTMLImageElement} image - The image for drawing.\n   * @param {Object} imageData - The image data.\n   * @param {Object} canvasData - The canvas data.\n   * @param {Object} options - The options.\n   * @returns {HTMLCanvasElement} The result canvas.\n   */\n\n  function getSourceCanvas(image, _ref6, _ref7, _ref8) {\n    var imageAspectRatio = _ref6.aspectRatio,\n        imageNaturalWidth = _ref6.naturalWidth,\n        imageNaturalHeight = _ref6.naturalHeight,\n        _ref6$rotate = _ref6.rotate,\n        rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,\n        _ref6$scaleX = _ref6.scaleX,\n        scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,\n        _ref6$scaleY = _ref6.scaleY,\n        scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;\n    var aspectRatio = _ref7.aspectRatio,\n        naturalWidth = _ref7.naturalWidth,\n        naturalHeight = _ref7.naturalHeight;\n    var _ref8$fillColor = _ref8.fillColor,\n        fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,\n        _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\n        imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,\n        _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\n        imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,\n        _ref8$maxWidth = _ref8.maxWidth,\n        maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,\n        _ref8$maxHeight = _ref8.maxHeight,\n        maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,\n        _ref8$minWidth = _ref8.minWidth,\n        minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,\n        _ref8$minHeight = _ref8.minHeight,\n        minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var maxSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var minSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as\n    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n\n    var destMaxSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var destMinSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n    var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\n    canvas.width = normalizeDecimalNumber(width);\n    canvas.height = normalizeDecimalNumber(height);\n    context.fillStyle = fillColor;\n    context.fillRect(0, 0, width, height);\n    context.save();\n    context.translate(width / 2, height / 2);\n    context.rotate(rotate * Math.PI / 180);\n    context.scale(scaleX, scaleY);\n    context.imageSmoothingEnabled = imageSmoothingEnabled;\n    context.imageSmoothingQuality = imageSmoothingQuality;\n    context.drawImage.apply(context, [image].concat(_toConsumableArray(params.map(function (param) {\n      return Math.floor(normalizeDecimalNumber(param));\n    }))));\n    context.restore();\n    return canvas;\n  }\n  var fromCharCode = String.fromCharCode;\n  /**\n   * Get string from char code in data view.\n   * @param {DataView} dataView - The data view for read.\n   * @param {number} start - The start index.\n   * @param {number} length - The read length.\n   * @returns {string} The read result.\n   */\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    length += start;\n\n    for (var i = start; i < length; i += 1) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n  var REGEXP_DATA_URL_HEAD = /^data:.*,/;\n  /**\n   * Transform Data URL to array buffer.\n   * @param {string} dataURL - The Data URL to transform.\n   * @returns {ArrayBuffer} The result array buffer.\n   */\n\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var arrayBuffer = new ArrayBuffer(binary.length);\n    var uint8 = new Uint8Array(arrayBuffer);\n    forEach(uint8, function (value, i) {\n      uint8[i] = binary.charCodeAt(i);\n    });\n    return arrayBuffer;\n  }\n  /**\n   * Transform array buffer to Data URL.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n   * @param {string} mimeType - The mime type of the Data URL.\n   * @returns {string} The result Data URL.\n   */\n\n  function arrayBufferToDataURL(arrayBuffer, mimeType) {\n    var chunks = []; // Chunk Typed Array for better performance (#435)\n\n    var chunkSize = 8192;\n    var uint8 = new Uint8Array(arrayBuffer);\n\n    while (uint8.length > 0) {\n      // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9\n      // eslint-disable-next-line prefer-spread\n      chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));\n      uint8 = uint8.subarray(chunkSize);\n    }\n\n    return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join('')));\n  }\n  /**\n   * Get orientation value from given array buffer.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n   * @returns {number} The read orientation value.\n   */\n\n  function resetAndGetOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var orientation; // Ignores range error when the image does not have correct Exif information\n\n    try {\n      var littleEndian;\n      var app1Start;\n      var ifdStart; // Only handle JPEG image (start by 0xFFD8)\n\n      if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n        var length = dataView.byteLength;\n        var offset = 2;\n\n        while (offset + 1 < length) {\n          if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n            app1Start = offset;\n            break;\n          }\n\n          offset += 1;\n        }\n      }\n\n      if (app1Start) {\n        var exifIDCode = app1Start + 4;\n        var tiffOffset = app1Start + 10;\n\n        if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n          var endianness = dataView.getUint16(tiffOffset);\n          littleEndian = endianness === 0x4949;\n\n          if (littleEndian || endianness === 0x4D4D\n          /* bigEndian */\n          ) {\n              if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n                var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n                if (firstIFDOffset >= 0x00000008) {\n                  ifdStart = tiffOffset + firstIFDOffset;\n                }\n              }\n            }\n        }\n      }\n\n      if (ifdStart) {\n        var _length = dataView.getUint16(ifdStart, littleEndian);\n\n        var _offset;\n\n        var i;\n\n        for (i = 0; i < _length; i += 1) {\n          _offset = ifdStart + i * 12 + 2;\n\n          if (dataView.getUint16(_offset, littleEndian) === 0x0112\n          /* Orientation */\n          ) {\n              // 8 is the offset of the current tag's value\n              _offset += 8; // Get the original orientation value\n\n              orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value\n\n              dataView.setUint16(_offset, 1, littleEndian);\n              break;\n            }\n        }\n      }\n    } catch (error) {\n      orientation = 1;\n    }\n\n    return orientation;\n  }\n  /**\n   * Parse Exif Orientation value.\n   * @param {number} orientation - The orientation to parse.\n   * @returns {Object} The parsed result.\n   */\n\n  function parseOrientation(orientation) {\n    var rotate = 0;\n    var scaleX = 1;\n    var scaleY = 1;\n\n    switch (orientation) {\n      // Flip horizontal\n      case 2:\n        scaleX = -1;\n        break;\n      // Rotate left 180°\n\n      case 3:\n        rotate = -180;\n        break;\n      // Flip vertical\n\n      case 4:\n        scaleY = -1;\n        break;\n      // Flip vertical and rotate right 90°\n\n      case 5:\n        rotate = 90;\n        scaleY = -1;\n        break;\n      // Rotate right 90°\n\n      case 6:\n        rotate = 90;\n        break;\n      // Flip horizontal and rotate right 90°\n\n      case 7:\n        rotate = 90;\n        scaleX = -1;\n        break;\n      // Rotate left 90°\n\n      case 8:\n        rotate = -90;\n        break;\n    }\n\n    return {\n      rotate: rotate,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var render = {\n    render: function render() {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n    initContainer: function initContainer() {\n      var element = this.element,\n          options = this.options,\n          container = this.container,\n          cropper = this.cropper;\n      var minWidth = Number(options.minContainerWidth);\n      var minHeight = Number(options.minContainerHeight);\n      addClass(cropper, CLASS_HIDDEN);\n      removeClass(element, CLASS_HIDDEN);\n      var containerData = {\n        width: Math.max(container.offsetWidth, minWidth >= 0 ? minWidth : MIN_CONTAINER_WIDTH),\n        height: Math.max(container.offsetHeight, minHeight >= 0 ? minHeight : MIN_CONTAINER_HEIGHT)\n      };\n      this.containerData = containerData;\n      setStyle(cropper, {\n        width: containerData.width,\n        height: containerData.height\n      });\n      addClass(element, CLASS_HIDDEN);\n      removeClass(cropper, CLASS_HIDDEN);\n    },\n    // Canvas (image wrapper)\n    initCanvas: function initCanvas() {\n      var containerData = this.containerData,\n          imageData = this.imageData;\n      var viewMode = this.options.viewMode;\n      var rotated = Math.abs(imageData.rotate) % 180 === 90;\n      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerData.width;\n      var canvasHeight = containerData.height;\n\n      if (containerData.height * aspectRatio > containerData.width) {\n        if (viewMode === 3) {\n          canvasWidth = containerData.height * aspectRatio;\n        } else {\n          canvasHeight = containerData.width / aspectRatio;\n        }\n      } else if (viewMode === 3) {\n        canvasHeight = containerData.width / aspectRatio;\n      } else {\n        canvasWidth = containerData.height * aspectRatio;\n      }\n\n      var canvasData = {\n        aspectRatio: aspectRatio,\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n      this.canvasData = canvasData;\n      this.limited = viewMode === 1 || viewMode === 2;\n      this.limitCanvas(true, true);\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n      canvasData.left = (containerData.width - canvasData.width) / 2;\n      canvasData.top = (containerData.height - canvasData.height) / 2;\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      this.initialCanvasData = assign({}, canvasData);\n    },\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var viewMode = options.viewMode;\n      var aspectRatio = canvasData.aspectRatio;\n      var cropped = this.cropped && cropBoxData;\n\n      if (sizeLimited) {\n        var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n        var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n\n        if (viewMode > 1) {\n          minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n          minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n\n          if (viewMode === 3) {\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        } else if (viewMode > 0) {\n          if (minCanvasWidth) {\n            minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n          } else if (minCanvasHeight) {\n            minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n          } else if (cropped) {\n            minCanvasWidth = cropBoxData.width;\n            minCanvasHeight = cropBoxData.height;\n\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        }\n\n        var _getAdjustedSizes = getAdjustedSizes({\n          aspectRatio: aspectRatio,\n          width: minCanvasWidth,\n          height: minCanvasHeight\n        });\n\n        minCanvasWidth = _getAdjustedSizes.width;\n        minCanvasHeight = _getAdjustedSizes.height;\n        canvasData.minWidth = minCanvasWidth;\n        canvasData.minHeight = minCanvasHeight;\n        canvasData.maxWidth = Infinity;\n        canvasData.maxHeight = Infinity;\n      }\n\n      if (positionLimited) {\n        if (viewMode > (cropped ? 0 : 1)) {\n          var newCanvasLeft = containerData.width - canvasData.width;\n          var newCanvasTop = containerData.height - canvasData.height;\n          canvasData.minLeft = Math.min(0, newCanvasLeft);\n          canvasData.minTop = Math.min(0, newCanvasTop);\n          canvasData.maxLeft = Math.max(0, newCanvasLeft);\n          canvasData.maxTop = Math.max(0, newCanvasTop);\n\n          if (cropped && this.limited) {\n            canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n            canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n            canvasData.maxLeft = cropBoxData.left;\n            canvasData.maxTop = cropBoxData.top;\n\n            if (viewMode === 2) {\n              if (canvasData.width >= containerData.width) {\n                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n              }\n\n              if (canvasData.height >= containerData.height) {\n                canvasData.minTop = Math.min(0, newCanvasTop);\n                canvasData.maxTop = Math.max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvasData.minLeft = -canvasData.width;\n          canvasData.minTop = -canvasData.height;\n          canvasData.maxLeft = containerData.width;\n          canvasData.maxTop = containerData.height;\n        }\n      }\n    },\n    renderCanvas: function renderCanvas(changed, transformed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n\n      if (transformed) {\n        var _getRotatedSizes = getRotatedSizes({\n          width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n          height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n          degree: imageData.rotate || 0\n        }),\n            naturalWidth = _getRotatedSizes.width,\n            naturalHeight = _getRotatedSizes.height;\n\n        var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n        var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n        canvasData.left -= (width - canvasData.width) / 2;\n        canvasData.top -= (height - canvasData.height) / 2;\n        canvasData.width = width;\n        canvasData.height = height;\n        canvasData.aspectRatio = naturalWidth / naturalHeight;\n        canvasData.naturalWidth = naturalWidth;\n        canvasData.naturalHeight = naturalHeight;\n        this.limitCanvas(true, false);\n      }\n\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n        canvasData.left = canvasData.oldLeft;\n      }\n\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n        canvasData.top = canvasData.oldTop;\n      }\n\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n      this.limitCanvas(false, true);\n      canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n      canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      setStyle(this.canvas, assign({\n        width: canvasData.width,\n        height: canvasData.height\n      }, getTransforms({\n        translateX: canvasData.left,\n        translateY: canvasData.top\n      })));\n      this.renderImage(changed);\n\n      if (this.cropped && this.limited) {\n        this.limitCropBox(true, true);\n      }\n    },\n    renderImage: function renderImage(changed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n      var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n      var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n      assign(imageData, {\n        width: width,\n        height: height,\n        left: (canvasData.width - width) / 2,\n        top: (canvasData.height - height) / 2\n      });\n      setStyle(this.image, assign({\n        width: imageData.width,\n        height: imageData.height\n      }, getTransforms(assign({\n        translateX: imageData.left,\n        translateY: imageData.top\n      }, imageData))));\n\n      if (changed) {\n        this.output();\n      }\n    },\n    initCropBox: function initCropBox() {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var aspectRatio = options.aspectRatio || options.initialAspectRatio;\n      var autoCropArea = Number(options.autoCropArea) || 0.8;\n      var cropBoxData = {\n        width: canvasData.width,\n        height: canvasData.height\n      };\n\n      if (aspectRatio) {\n        if (canvasData.height * aspectRatio > canvasData.width) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      this.cropBoxData = cropBoxData;\n      this.limitCropBox(true, true); // Initialize auto crop area\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than \"minWidth/Height\"\n\n      cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n      cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n      cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n      cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n      this.initialCropBoxData = assign({}, cropBoxData);\n    },\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData,\n          limited = this.limited;\n      var aspectRatio = options.aspectRatio;\n\n      if (sizeLimited) {\n        var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n        var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n        var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\n        var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height; // The min/maxCropBoxWidth/Height must be less than container's width/height\n\n        minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n        minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        } // The minWidth/Height must be less than maxWidth/Height\n\n\n        cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n        cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n        cropBoxData.maxWidth = maxCropBoxWidth;\n        cropBoxData.maxHeight = maxCropBoxHeight;\n      }\n\n      if (positionLimited) {\n        if (limited) {\n          cropBoxData.minLeft = Math.max(0, canvasData.left);\n          cropBoxData.minTop = Math.max(0, canvasData.top);\n          cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n          cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n        } else {\n          cropBoxData.minLeft = 0;\n          cropBoxData.minTop = 0;\n          cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n          cropBoxData.maxTop = containerData.height - cropBoxData.height;\n        }\n      }\n    },\n    renderCropBox: function renderCropBox() {\n      var options = this.options,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData;\n\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n        cropBoxData.left = cropBoxData.oldLeft;\n      }\n\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n        cropBoxData.top = cropBoxData.oldTop;\n      }\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n      this.limitCropBox(false, true);\n      cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n      cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n\n      if (options.movable && options.cropBoxMovable) {\n        // Turn to move the canvas when the crop box is equal to the container\n        setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      setStyle(this.cropBox, assign({\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      }, getTransforms({\n        translateX: cropBoxData.left,\n        translateY: cropBoxData.top\n      })));\n\n      if (this.cropped && this.limited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.disabled) {\n        this.output();\n      }\n    },\n    output: function output() {\n      this.preview();\n      dispatchEvent(this.element, EVENT_CROP, this.getData());\n    }\n  };\n\n  var preview = {\n    initPreview: function initPreview() {\n      var element = this.element,\n          crossOrigin = this.crossOrigin;\n      var preview = this.options.preview;\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\n      var alt = element.alt || 'The image to preview';\n      var image = document.createElement('img');\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = url;\n      image.alt = alt;\n      this.viewBox.appendChild(image);\n      this.viewBoxImage = image;\n\n      if (!preview) {\n        return;\n      }\n\n      var previews = preview;\n\n      if (typeof preview === 'string') {\n        previews = element.ownerDocument.querySelectorAll(preview);\n      } else if (preview.querySelector) {\n        previews = [preview];\n      }\n\n      this.previews = previews;\n      forEach(previews, function (el) {\n        var img = document.createElement('img'); // Save the original size for recover\n\n        setData(el, DATA_PREVIEW, {\n          width: el.offsetWidth,\n          height: el.offsetHeight,\n          html: el.innerHTML\n        });\n\n        if (crossOrigin) {\n          img.crossOrigin = crossOrigin;\n        }\n\n        img.src = url;\n        img.alt = alt;\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * Add `height:auto` to override `height` attribute on IE8\n         * (Occur only when margin-top <= -height)\n         */\n\n        img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n        el.innerHTML = '';\n        el.appendChild(img);\n      });\n    },\n    resetPreview: function resetPreview() {\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        setStyle(element, {\n          width: data.width,\n          height: data.height\n        });\n        element.innerHTML = data.html;\n        removeData(element, DATA_PREVIEW);\n      });\n    },\n    preview: function preview() {\n      var imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var cropBoxWidth = cropBoxData.width,\n          cropBoxHeight = cropBoxData.height;\n      var width = imageData.width,\n          height = imageData.height;\n      var left = cropBoxData.left - canvasData.left - imageData.left;\n      var top = cropBoxData.top - canvasData.top - imageData.top;\n\n      if (!this.cropped || this.disabled) {\n        return;\n      }\n\n      setStyle(this.viewBoxImage, assign({\n        width: width,\n        height: height\n      }, getTransforms(assign({\n        translateX: -left,\n        translateY: -top\n      }, imageData))));\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        setStyle(element, {\n          width: newWidth,\n          height: newHeight\n        });\n        setStyle(element.getElementsByTagName('img')[0], assign({\n          width: width * ratio,\n          height: height * ratio\n        }, getTransforms(assign({\n          translateX: -left * ratio,\n          translateY: -top * ratio\n        }, imageData))));\n      });\n    }\n  };\n\n  var events = {\n    bind: function bind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        addListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        addListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        addListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        addListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        addListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {\n          passive: false,\n          capture: true\n        });\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n      }\n\n      addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n      addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n\n      if (options.responsive) {\n        addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));\n      }\n    },\n    unbind: function unbind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        removeListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        removeListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        removeListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        removeListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        removeListener(cropper, EVENT_WHEEL, this.onWheel, {\n          passive: false,\n          capture: true\n        });\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);\n      }\n\n      removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);\n      removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);\n\n      if (options.responsive) {\n        removeListener(window, EVENT_RESIZE, this.onResize);\n      }\n    }\n  };\n\n  var handlers = {\n    resize: function resize() {\n      if (this.disabled) {\n        return;\n      }\n\n      var options = this.options,\n          container = this.container,\n          containerData = this.containerData;\n      var ratio = container.offsetWidth / containerData.width; // Resize when width changed or height changed\n\n      if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n        var canvasData;\n        var cropBoxData;\n\n        if (options.restore) {\n          canvasData = this.getCanvasData();\n          cropBoxData = this.getCropBoxData();\n        }\n\n        this.render();\n\n        if (options.restore) {\n          this.setCanvasData(forEach(canvasData, function (n, i) {\n            canvasData[i] = n * ratio;\n          }));\n          this.setCropBoxData(forEach(cropBoxData, function (n, i) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n    dblclick: function dblclick() {\n      if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {\n        return;\n      }\n\n      this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);\n    },\n    wheel: function wheel(event) {\n      var _this = this;\n\n      var ratio = Number(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.disabled) {\n        return;\n      }\n\n      event.preventDefault(); // Limit wheel speed to prevent zoom too fast (#21)\n\n      if (this.wheeling) {\n        return;\n      }\n\n      this.wheeling = true;\n      setTimeout(function () {\n        _this.wheeling = false;\n      }, 50);\n\n      if (event.deltaY) {\n        delta = event.deltaY > 0 ? 1 : -1;\n      } else if (event.wheelDelta) {\n        delta = -event.wheelDelta / 120;\n      } else if (event.detail) {\n        delta = event.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, event);\n    },\n    cropStart: function cropStart(event) {\n      var buttons = event.buttons,\n          button = event.button;\n\n      if (this.disabled // Handle mouse event and pointer event and ignore touch event\n      || (event.type === 'mousedown' || event.type === 'pointerdown' && event.pointerType === 'mouse') && ( // No primary button (Usually the left button)\n      isNumber(buttons) && buttons !== 1 || isNumber(button) && button !== 0 // Open context menu\n      || event.ctrlKey)) {\n        return;\n      }\n\n      var options = this.options,\n          pointers = this.pointers;\n      var action;\n\n      if (event.changedTouches) {\n        // Handle touch event\n        forEach(event.changedTouches, function (touch) {\n          pointers[touch.identifier] = getPointer(touch);\n        });\n      } else {\n        // Handle mouse event and pointer event\n        pointers[event.pointerId || 0] = getPointer(event);\n      }\n\n      if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n        action = ACTION_ZOOM;\n      } else {\n        action = getData(event.target, DATA_ACTION);\n      }\n\n      if (!REGEXP_ACTIONS.test(action)) {\n        return;\n      }\n\n      if (dispatchEvent(this.element, EVENT_CROP_START, {\n        originalEvent: event,\n        action: action\n      }) === false) {\n        return;\n      } // This line is required for preventing page zooming in iOS browsers\n\n\n      event.preventDefault();\n      this.action = action;\n      this.cropping = false;\n\n      if (action === ACTION_CROP) {\n        this.cropping = true;\n        addClass(this.dragBox, CLASS_MODAL);\n      }\n    },\n    cropMove: function cropMove(event) {\n      var action = this.action;\n\n      if (this.disabled || !action) {\n        return;\n      }\n\n      var pointers = this.pointers;\n      event.preventDefault();\n\n      if (dispatchEvent(this.element, EVENT_CROP_MOVE, {\n        originalEvent: event,\n        action: action\n      }) === false) {\n        return;\n      }\n\n      if (event.changedTouches) {\n        forEach(event.changedTouches, function (touch) {\n          // The first parameter should not be undefined (#432)\n          assign(pointers[touch.identifier] || {}, getPointer(touch, true));\n        });\n      } else {\n        assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));\n      }\n\n      this.change(event);\n    },\n    cropEnd: function cropEnd(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      var action = this.action,\n          pointers = this.pointers;\n\n      if (event.changedTouches) {\n        forEach(event.changedTouches, function (touch) {\n          delete pointers[touch.identifier];\n        });\n      } else {\n        delete pointers[event.pointerId || 0];\n      }\n\n      if (!action) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if (!Object.keys(pointers).length) {\n        this.action = '';\n      }\n\n      if (this.cropping) {\n        this.cropping = false;\n        toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);\n      }\n\n      dispatchEvent(this.element, EVENT_CROP_END, {\n        originalEvent: event,\n        action: action\n      });\n    }\n  };\n\n  var change = {\n    change: function change(event) {\n      var options = this.options,\n          canvasData = this.canvasData,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData,\n          pointers = this.pointers;\n      var action = this.action;\n      var aspectRatio = options.aspectRatio;\n      var left = cropBoxData.left,\n          top = cropBoxData.top,\n          width = cropBoxData.width,\n          height = cropBoxData.height;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = containerData.width;\n      var maxHeight = containerData.height;\n      var renderable = true;\n      var offset; // Locking aspect ratio in \"free mode\" by holding shift key\n\n      if (!aspectRatio && event.shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.limited) {\n        minLeft = cropBoxData.minLeft;\n        minTop = cropBoxData.minTop;\n        maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n        maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n      }\n\n      var pointer = pointers[Object.keys(pointers)[0]];\n      var range = {\n        x: pointer.endX - pointer.startX,\n        y: pointer.endY - pointer.startY\n      };\n\n      var check = function check(side) {\n        switch (side) {\n          case ACTION_EAST:\n            if (right + range.x > maxWidth) {\n              range.x = maxWidth - right;\n            }\n\n            break;\n\n          case ACTION_WEST:\n            if (left + range.x < minLeft) {\n              range.x = minLeft - left;\n            }\n\n            break;\n\n          case ACTION_NORTH:\n            if (top + range.y < minTop) {\n              range.y = minTop - top;\n            }\n\n            break;\n\n          case ACTION_SOUTH:\n            if (bottom + range.y > maxHeight) {\n              range.y = maxHeight - bottom;\n            }\n\n            break;\n        }\n      };\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n        // Resize crop box\n\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_EAST);\n          width += range.x;\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_NORTH);\n          height -= range.y;\n          top += range.y;\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_WEST);\n          width -= range.x;\n          left += range.x;\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_SOUTH);\n          height += range.y;\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += cropBoxData.width - width;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_WEST);\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_EAST);\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n        // Move canvas\n\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n        // Zoom canvas\n\n        case ACTION_ZOOM:\n          this.zoom(getMaxZoomRatio(pointers), event);\n          renderable = false;\n          break;\n        // Create crop box\n\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = getOffset(this.cropper);\n          left = pointer.startX - offset.left;\n          top = pointer.startY - offset.top;\n          width = cropBoxData.minWidth;\n          height = cropBoxData.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          } // Show the crop box if is hidden\n\n\n          if (!this.cropped) {\n            removeClass(this.cropBox, CLASS_HIDDEN);\n            this.cropped = true;\n\n            if (this.limited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n      }\n\n      if (renderable) {\n        cropBoxData.width = width;\n        cropBoxData.height = height;\n        cropBoxData.left = left;\n        cropBoxData.top = top;\n        this.action = action;\n        this.renderCropBox();\n      } // Override\n\n\n      forEach(pointers, function (p) {\n        p.startX = p.endX;\n        p.startY = p.endY;\n      });\n    }\n  };\n\n  var methods = {\n    // Show the crop box manually\n    crop: function crop() {\n      if (this.ready && !this.cropped && !this.disabled) {\n        this.cropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          addClass(this.dragBox, CLASS_MODAL);\n        }\n\n        removeClass(this.cropBox, CLASS_HIDDEN);\n        this.setCropBoxData(this.initialCropBoxData);\n      }\n\n      return this;\n    },\n    // Reset the image and crop box to their initial states\n    reset: function reset() {\n      if (this.ready && !this.disabled) {\n        this.imageData = assign({}, this.initialImageData);\n        this.canvasData = assign({}, this.initialCanvasData);\n        this.cropBoxData = assign({}, this.initialCropBoxData);\n        this.renderCanvas();\n\n        if (this.cropped) {\n          this.renderCropBox();\n        }\n      }\n\n      return this;\n    },\n    // Clear the crop box\n    clear: function clear() {\n      if (this.cropped && !this.disabled) {\n        assign(this.cropBoxData, {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0\n        });\n        this.cropped = false;\n        this.renderCropBox();\n        this.limitCanvas(true, true); // Render canvas after crop box rendered\n\n        this.renderCanvas();\n        removeClass(this.dragBox, CLASS_MODAL);\n        addClass(this.cropBox, CLASS_HIDDEN);\n      }\n\n      return this;\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     * @param {string} url - The new URL.\n     * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.\n     * @returns {Cropper} this\n     */\n    replace: function replace(url) {\n      var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!this.disabled && url) {\n        if (this.isImg) {\n          this.element.src = url;\n        }\n\n        if (hasSameSize) {\n          this.url = url;\n          this.image.src = url;\n\n          if (this.ready) {\n            this.viewBoxImage.src = url;\n            forEach(this.previews, function (element) {\n              element.getElementsByTagName('img')[0].src = url;\n            });\n          }\n        } else {\n          if (this.isImg) {\n            this.replaced = true;\n          }\n\n          this.options.data = null;\n          this.uncreate();\n          this.load(url);\n        }\n      }\n\n      return this;\n    },\n    // Enable (unfreeze) the cropper\n    enable: function enable() {\n      if (this.ready && this.disabled) {\n        this.disabled = false;\n        removeClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n    // Disable (freeze) the cropper\n    disable: function disable() {\n      if (this.ready && !this.disabled) {\n        this.disabled = true;\n        addClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n\n    /**\n     * Destroy the cropper and remove the instance from the image\n     * @returns {Cropper} this\n     */\n    destroy: function destroy() {\n      var element = this.element;\n\n      if (!element[NAMESPACE]) {\n        return this;\n      }\n\n      element[NAMESPACE] = undefined;\n\n      if (this.isImg && this.replaced) {\n        element.src = this.originalUrl;\n      }\n\n      this.uncreate();\n      return this;\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     * @param {number} offsetX - The relative offset distance on the x-axis.\n     * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.\n     * @returns {Cropper} this\n     */\n    move: function move(offsetX) {\n      var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;\n      var _this$canvasData = this.canvasData,\n          left = _this$canvasData.left,\n          top = _this$canvasData.top;\n      return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     * @param {number} x - The x-axis coordinate.\n     * @param {number} [y=x] - The y-axis coordinate.\n     * @returns {Cropper} this\n     */\n    moveTo: function moveTo(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      var canvasData = this.canvasData;\n      var changed = false;\n      x = Number(x);\n      y = Number(y);\n\n      if (this.ready && !this.disabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvasData.left = x;\n          changed = true;\n        }\n\n        if (isNumber(y)) {\n          canvasData.top = y;\n          changed = true;\n        }\n\n        if (changed) {\n          this.renderCanvas(true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoom: function zoom(ratio, _originalEvent) {\n      var canvasData = this.canvasData;\n      ratio = Number(ratio);\n\n      if (ratio < 0) {\n        ratio = 1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Object} pivot - The zoom pivot point coordinate.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoomTo: function zoomTo(ratio, pivot, _originalEvent) {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var width = canvasData.width,\n          height = canvasData.height,\n          naturalWidth = canvasData.naturalWidth,\n          naturalHeight = canvasData.naturalHeight;\n      ratio = Number(ratio);\n\n      if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n        var newWidth = naturalWidth * ratio;\n        var newHeight = naturalHeight * ratio;\n\n        if (dispatchEvent(this.element, EVENT_ZOOM, {\n          ratio: ratio,\n          oldRatio: width / naturalWidth,\n          originalEvent: _originalEvent\n        }) === false) {\n          return this;\n        }\n\n        if (_originalEvent) {\n          var pointers = this.pointers;\n          var offset = getOffset(this.cropper);\n          var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n            pageX: _originalEvent.pageX,\n            pageY: _originalEvent.pageY\n          }; // Zoom from the triggering point of the event\n\n          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n        } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {\n          canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n        } else {\n          // Zoom from the center of the canvas\n          canvasData.left -= (newWidth - width) / 2;\n          canvasData.top -= (newHeight - height) / 2;\n        }\n\n        canvasData.width = newWidth;\n        canvasData.height = newHeight;\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotate: function rotate(degree) {\n      return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotateTo: function rotateTo(degree) {\n      degree = Number(degree);\n\n      if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n        this.imageData.rotate = degree % 360;\n        this.renderCanvas(true, true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Scale the image on the x-axis.\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @returns {Cropper} this\n     */\n    scaleX: function scaleX(_scaleX) {\n      var scaleY = this.imageData.scaleY;\n      return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the image on the y-axis.\n     * @param {number} scaleY - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scaleY: function scaleY(_scaleY) {\n      var scaleX = this.imageData.scaleX;\n      return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n    },\n\n    /**\n     * Scale the image\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scale: function scale(scaleX) {\n      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n      var imageData = this.imageData;\n      var transformed = false;\n      scaleX = Number(scaleX);\n      scaleY = Number(scaleY);\n\n      if (this.ready && !this.disabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          imageData.scaleX = scaleX;\n          transformed = true;\n        }\n\n        if (isNumber(scaleY)) {\n          imageData.scaleY = scaleY;\n          transformed = true;\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     * @param {boolean} [rounded=false] - Indicate if round the data values or not.\n     * @returns {Object} The result cropped data.\n     */\n    getData: function getData() {\n      var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.ready && this.cropped) {\n        data = {\n          x: cropBoxData.left - canvasData.left,\n          y: cropBoxData.top - canvasData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n        var ratio = imageData.width / imageData.naturalWidth;\n        forEach(data, function (n, i) {\n          data[i] = n / ratio;\n        });\n\n        if (rounded) {\n          // In case rounding off leads to extra 1px in right or bottom border\n          // we should round the top-left corner and the dimension (#343).\n          var bottom = Math.round(data.y + data.height);\n          var right = Math.round(data.x + data.width);\n          data.x = Math.round(data.x);\n          data.y = Math.round(data.y);\n          data.width = right - data.x;\n          data.height = bottom - data.y;\n        }\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = imageData.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = imageData.scaleX || 1;\n        data.scaleY = imageData.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     * @param {Object} data - The new data.\n     * @returns {Cropper} this\n     */\n    setData: function setData(data) {\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData;\n      var cropBoxData = {};\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        var transformed = false;\n\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n            imageData.rotate = data.rotate;\n            transformed = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n            imageData.scaleX = data.scaleX;\n            transformed = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n            imageData.scaleY = data.scaleY;\n            transformed = true;\n          }\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n\n        var ratio = imageData.width / imageData.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvasData.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvasData.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the container size data.\n     * @returns {Object} The result container data.\n     */\n    getContainerData: function getContainerData() {\n      return this.ready ? assign({}, this.containerData) : {};\n    },\n\n    /**\n     * Get the image position and size data.\n     * @returns {Object} The result image data.\n     */\n    getImageData: function getImageData() {\n      return this.sized ? assign({}, this.imageData) : {};\n    },\n\n    /**\n     * Get the canvas position and size data.\n     * @returns {Object} The result canvas data.\n     */\n    getCanvasData: function getCanvasData() {\n      var canvasData = this.canvasData;\n      var data = {};\n\n      if (this.ready) {\n        forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n          data[n] = canvasData[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data.\n     * @param {Object} data - The new canvas data.\n     * @returns {Cropper} this\n     */\n    setCanvasData: function setCanvasData(data) {\n      var canvasData = this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvasData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvasData.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvasData.width = data.width;\n          canvasData.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvasData.height = data.height;\n          canvasData.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the crop box position and size data.\n     * @returns {Object} The result crop box data.\n     */\n    getCropBoxData: function getCropBoxData() {\n      var cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.ready && this.cropped) {\n        data = {\n          left: cropBoxData.left,\n          top: cropBoxData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data.\n     * @param {Object} data - The new crop box data.\n     * @returns {Cropper} this\n     */\n    setCropBoxData: function setCropBoxData(data) {\n      var cropBoxData = this.cropBoxData;\n      var aspectRatio = this.options.aspectRatio;\n      var widthChanged;\n      var heightChanged;\n\n      if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          cropBoxData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBoxData.top = data.top;\n        }\n\n        if (isNumber(data.width) && data.width !== cropBoxData.width) {\n          widthChanged = true;\n          cropBoxData.width = data.width;\n        }\n\n        if (isNumber(data.height) && data.height !== cropBoxData.height) {\n          heightChanged = true;\n          cropBoxData.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (widthChanged) {\n            cropBoxData.height = cropBoxData.width / aspectRatio;\n          } else if (heightChanged) {\n            cropBoxData.width = cropBoxData.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n\n      return this;\n    },\n\n    /**\n     * Get a canvas drawn the cropped image.\n     * @param {Object} [options={}] - The config options.\n     * @returns {HTMLCanvasElement} - The result canvas.\n     */\n    getCroppedCanvas: function getCroppedCanvas() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this.ready || !window.HTMLCanvasElement) {\n        return null;\n      }\n\n      var canvasData = this.canvasData;\n      var source = getSourceCanvas(this.image, this.imageData, canvasData, options); // Returns the source canvas if it is not cropped.\n\n      if (!this.cropped) {\n        return source;\n      }\n\n      var _this$getData = this.getData(),\n          initialX = _this$getData.x,\n          initialY = _this$getData.y,\n          initialWidth = _this$getData.width,\n          initialHeight = _this$getData.height;\n\n      var ratio = source.width / Math.floor(canvasData.naturalWidth);\n\n      if (ratio !== 1) {\n        initialX *= ratio;\n        initialY *= ratio;\n        initialWidth *= ratio;\n        initialHeight *= ratio;\n      }\n\n      var aspectRatio = initialWidth / initialHeight;\n      var maxSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.maxWidth || Infinity,\n        height: options.maxHeight || Infinity\n      });\n      var minSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.minWidth || 0,\n        height: options.minHeight || 0\n      }, 'cover');\n\n      var _getAdjustedSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.width || (ratio !== 1 ? source.width : initialWidth),\n        height: options.height || (ratio !== 1 ? source.height : initialHeight)\n      }),\n          width = _getAdjustedSizes.width,\n          height = _getAdjustedSizes.height;\n\n      width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n      height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = normalizeDecimalNumber(width);\n      canvas.height = normalizeDecimalNumber(height);\n      context.fillStyle = options.fillColor || 'transparent';\n      context.fillRect(0, 0, width, height);\n      var _options$imageSmoothi = options.imageSmoothingEnabled,\n          imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi,\n          imageSmoothingQuality = options.imageSmoothingQuality;\n      context.imageSmoothingEnabled = imageSmoothingEnabled;\n\n      if (imageSmoothingQuality) {\n        context.imageSmoothingQuality = imageSmoothingQuality;\n      } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n\n\n      var sourceWidth = source.width;\n      var sourceHeight = source.height; // Source canvas parameters\n\n      var srcX = initialX;\n      var srcY = initialY;\n      var srcWidth;\n      var srcHeight; // Destination canvas parameters\n\n      var dstX;\n      var dstY;\n      var dstWidth;\n      var dstHeight;\n\n      if (srcX <= -initialWidth || srcX > sourceWidth) {\n        srcX = 0;\n        srcWidth = 0;\n        dstX = 0;\n        dstWidth = 0;\n      } else if (srcX <= 0) {\n        dstX = -srcX;\n        srcX = 0;\n        srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n        dstWidth = srcWidth;\n      } else if (srcX <= sourceWidth) {\n        dstX = 0;\n        srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n        dstWidth = srcWidth;\n      }\n\n      if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n        srcY = 0;\n        srcHeight = 0;\n        dstY = 0;\n        dstHeight = 0;\n      } else if (srcY <= 0) {\n        dstY = -srcY;\n        srcY = 0;\n        srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n        dstHeight = srcHeight;\n      } else if (srcY <= sourceHeight) {\n        dstY = 0;\n        srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n        dstHeight = srcHeight;\n      }\n\n      var params = [srcX, srcY, srcWidth, srcHeight]; // Avoid \"IndexSizeError\"\n\n      if (dstWidth > 0 && dstHeight > 0) {\n        var scale = width / initialWidth;\n        params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n      } // All the numerical parameters should be integer for `drawImage`\n      // https://github.com/fengyuanchen/cropper/issues/476\n\n\n      context.drawImage.apply(context, [source].concat(_toConsumableArray(params.map(function (param) {\n        return Math.floor(normalizeDecimalNumber(param));\n      }))));\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box.\n     * @param {number} aspectRatio - The new aspect ratio.\n     * @returns {Cropper} this\n     */\n    setAspectRatio: function setAspectRatio(aspectRatio) {\n      var options = this.options;\n\n      if (!this.disabled && !isUndefined(aspectRatio)) {\n        // 0 -> NaN\n        options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n\n        if (this.ready) {\n          this.initCropBox();\n\n          if (this.cropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Change the drag mode.\n     * @param {string} mode - The new drag mode.\n     * @returns {Cropper} this\n     */\n    setDragMode: function setDragMode(mode) {\n      var options = this.options,\n          dragBox = this.dragBox,\n          face = this.face;\n\n      if (this.ready && !this.disabled) {\n        var croppable = mode === DRAG_MODE_CROP;\n        var movable = options.movable && mode === DRAG_MODE_MOVE;\n        mode = croppable || movable ? mode : DRAG_MODE_NONE;\n        options.dragMode = mode;\n        setData(dragBox, DATA_ACTION, mode);\n        toggleClass(dragBox, CLASS_CROP, croppable);\n        toggleClass(dragBox, CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n          // Sync drag mode to crop box when it is not movable\n          setData(face, DATA_ACTION, mode);\n          toggleClass(face, CLASS_CROP, croppable);\n          toggleClass(face, CLASS_MOVE, movable);\n        }\n      }\n\n      return this;\n    }\n  };\n\n  var AnotherCropper = WINDOW.Cropper;\n\n  var Cropper = /*#__PURE__*/function () {\n    /**\n     * Create a new Cropper.\n     * @param {Element} element - The target element for cropping.\n     * @param {Object} [options={}] - The configuration options.\n     */\n    function Cropper(element) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, Cropper);\n\n      if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {\n        throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n      }\n\n      this.element = element;\n      this.options = assign({}, DEFAULTS, isPlainObject(options) && options);\n      this.cropped = false;\n      this.disabled = false;\n      this.pointers = {};\n      this.ready = false;\n      this.reloading = false;\n      this.replaced = false;\n      this.sized = false;\n      this.sizing = false;\n      this.init();\n    }\n\n    _createClass(Cropper, [{\n      key: \"init\",\n      value: function init() {\n        var element = this.element;\n        var tagName = element.tagName.toLowerCase();\n        var url;\n\n        if (element[NAMESPACE]) {\n          return;\n        }\n\n        element[NAMESPACE] = this;\n\n        if (tagName === 'img') {\n          this.isImg = true; // e.g.: \"img/picture.jpg\"\n\n          url = element.getAttribute('src') || '';\n          this.originalUrl = url; // Stop when it's a blank image\n\n          if (!url) {\n            return;\n          } // e.g.: \"https://example.com/img/picture.jpg\"\n\n\n          url = element.src;\n        } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n          url = element.toDataURL();\n        }\n\n        this.load(url);\n      }\n    }, {\n      key: \"load\",\n      value: function load(url) {\n        var _this = this;\n\n        if (!url) {\n          return;\n        }\n\n        this.url = url;\n        this.imageData = {};\n        var element = this.element,\n            options = this.options;\n\n        if (!options.rotatable && !options.scalable) {\n          options.checkOrientation = false;\n        } // Only IE10+ supports Typed Arrays\n\n\n        if (!options.checkOrientation || !window.ArrayBuffer) {\n          this.clone();\n          return;\n        } // Detect the mime type of the image directly if it is a Data URL\n\n\n        if (REGEXP_DATA_URL.test(url)) {\n          // Read ArrayBuffer from Data URL of JPEG images directly for better performance\n          if (REGEXP_DATA_URL_JPEG.test(url)) {\n            this.read(dataURLToArrayBuffer(url));\n          } else {\n            // Only a JPEG image may contains Exif Orientation information,\n            // the rest types of Data URLs are not necessary to check orientation at all.\n            this.clone();\n          }\n\n          return;\n        } // 1. Detect the mime type of the image by a XMLHttpRequest.\n        // 2. Load the image as ArrayBuffer for reading orientation if its a JPEG image.\n\n\n        var xhr = new XMLHttpRequest();\n        var clone = this.clone.bind(this);\n        this.reloading = true;\n        this.xhr = xhr; // 1. Cross origin requests are only supported for protocol schemes:\n        // http, https, data, chrome, chrome-extension.\n        // 2. Access to XMLHttpRequest from a Data URL will be blocked by CORS policy\n        // in some browsers as IE11 and Safari.\n\n        xhr.onabort = clone;\n        xhr.onerror = clone;\n        xhr.ontimeout = clone;\n\n        xhr.onprogress = function () {\n          // Abort the request directly if it not a JPEG image for better performance\n          if (xhr.getResponseHeader('content-type') !== MIME_TYPE_JPEG) {\n            xhr.abort();\n          }\n        };\n\n        xhr.onload = function () {\n          _this.read(xhr.response);\n        };\n\n        xhr.onloadend = function () {\n          _this.reloading = false;\n          _this.xhr = null;\n        }; // Bust cache when there is a \"crossOrigin\" property to avoid browser cache error\n\n\n        if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n          url = addTimestamp(url);\n        }\n\n        xhr.open('GET', url);\n        xhr.responseType = 'arraybuffer';\n        xhr.withCredentials = element.crossOrigin === 'use-credentials';\n        xhr.send();\n      }\n    }, {\n      key: \"read\",\n      value: function read(arrayBuffer) {\n        var options = this.options,\n            imageData = this.imageData; // Reset the orientation value to its default value 1\n        // as some iOS browsers will render image with its orientation\n\n        var orientation = resetAndGetOrientation(arrayBuffer);\n        var rotate = 0;\n        var scaleX = 1;\n        var scaleY = 1;\n\n        if (orientation > 1) {\n          // Generate a new URL which has the default orientation value\n          this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);\n\n          var _parseOrientation = parseOrientation(orientation);\n\n          rotate = _parseOrientation.rotate;\n          scaleX = _parseOrientation.scaleX;\n          scaleY = _parseOrientation.scaleY;\n        }\n\n        if (options.rotatable) {\n          imageData.rotate = rotate;\n        }\n\n        if (options.scalable) {\n          imageData.scaleX = scaleX;\n          imageData.scaleY = scaleY;\n        }\n\n        this.clone();\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var element = this.element,\n            url = this.url;\n        var crossOrigin = element.crossOrigin;\n        var crossOriginUrl = url;\n\n        if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {\n          if (!crossOrigin) {\n            crossOrigin = 'anonymous';\n          } // Bust cache when there is not a \"crossOrigin\" property (#519)\n\n\n          crossOriginUrl = addTimestamp(url);\n        }\n\n        this.crossOrigin = crossOrigin;\n        this.crossOriginUrl = crossOriginUrl;\n        var image = document.createElement('img');\n\n        if (crossOrigin) {\n          image.crossOrigin = crossOrigin;\n        }\n\n        image.src = crossOriginUrl || url;\n        image.alt = element.alt || 'The image to crop';\n        this.image = image;\n        image.onload = this.start.bind(this);\n        image.onerror = this.stop.bind(this);\n        addClass(image, CLASS_HIDE);\n        element.parentNode.insertBefore(image, element.nextSibling);\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var image = this.image;\n        image.onload = null;\n        image.onerror = null;\n        this.sizing = true; // Match all browsers that use WebKit as the layout engine in iOS devices,\n        // such as Safari for iOS, Chrome for iOS, and in-app browsers.\n\n        var isIOSWebKit = WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(WINDOW.navigator.userAgent);\n\n        var done = function done(naturalWidth, naturalHeight) {\n          assign(_this2.imageData, {\n            naturalWidth: naturalWidth,\n            naturalHeight: naturalHeight,\n            aspectRatio: naturalWidth / naturalHeight\n          });\n          _this2.initialImageData = assign({}, _this2.imageData);\n          _this2.sizing = false;\n          _this2.sized = true;\n\n          _this2.build();\n        }; // Most modern browsers (excepts iOS WebKit)\n\n\n        if (image.naturalWidth && !isIOSWebKit) {\n          done(image.naturalWidth, image.naturalHeight);\n          return;\n        }\n\n        var sizingImage = document.createElement('img');\n        var body = document.body || document.documentElement;\n        this.sizingImage = sizingImage;\n\n        sizingImage.onload = function () {\n          done(sizingImage.width, sizingImage.height);\n\n          if (!isIOSWebKit) {\n            body.removeChild(sizingImage);\n          }\n        };\n\n        sizingImage.src = image.src; // iOS WebKit will convert the image automatically\n        // with its orientation once append it into DOM (#279)\n\n        if (!isIOSWebKit) {\n          sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\n          body.appendChild(sizingImage);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var image = this.image;\n        image.onload = null;\n        image.onerror = null;\n        image.parentNode.removeChild(image);\n        this.image = null;\n      }\n    }, {\n      key: \"build\",\n      value: function build() {\n        if (!this.sized || this.ready) {\n          return;\n        }\n\n        var element = this.element,\n            options = this.options,\n            image = this.image; // Create cropper elements\n\n        var container = element.parentNode;\n        var template = document.createElement('div');\n        template.innerHTML = TEMPLATE;\n        var cropper = template.querySelector(\".\".concat(NAMESPACE, \"-container\"));\n        var canvas = cropper.querySelector(\".\".concat(NAMESPACE, \"-canvas\"));\n        var dragBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-drag-box\"));\n        var cropBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-crop-box\"));\n        var face = cropBox.querySelector(\".\".concat(NAMESPACE, \"-face\"));\n        this.container = container;\n        this.cropper = cropper;\n        this.canvas = canvas;\n        this.dragBox = dragBox;\n        this.cropBox = cropBox;\n        this.viewBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-view-box\"));\n        this.face = face;\n        canvas.appendChild(image); // Hide the original image\n\n        addClass(element, CLASS_HIDDEN); // Inserts the cropper after to the current image\n\n        container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden\n\n        if (!this.isImg) {\n          removeClass(image, CLASS_HIDE);\n        }\n\n        this.initPreview();\n        this.bind();\n        options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n        options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n        options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n        addClass(cropBox, CLASS_HIDDEN);\n\n        if (!options.guides) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-dashed\")), CLASS_HIDDEN);\n        }\n\n        if (!options.center) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-center\")), CLASS_HIDDEN);\n        }\n\n        if (options.background) {\n          addClass(cropper, \"\".concat(NAMESPACE, \"-bg\"));\n        }\n\n        if (!options.highlight) {\n          addClass(face, CLASS_INVISIBLE);\n        }\n\n        if (options.cropBoxMovable) {\n          addClass(face, CLASS_MOVE);\n          setData(face, DATA_ACTION, ACTION_ALL);\n        }\n\n        if (!options.cropBoxResizable) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-line\")), CLASS_HIDDEN);\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-point\")), CLASS_HIDDEN);\n        }\n\n        this.render();\n        this.ready = true;\n        this.setDragMode(options.dragMode);\n\n        if (options.autoCrop) {\n          this.crop();\n        }\n\n        this.setData(options.data);\n\n        if (isFunction(options.ready)) {\n          addListener(element, EVENT_READY, options.ready, {\n            once: true\n          });\n        }\n\n        dispatchEvent(element, EVENT_READY);\n      }\n    }, {\n      key: \"unbuild\",\n      value: function unbuild() {\n        if (!this.ready) {\n          return;\n        }\n\n        this.ready = false;\n        this.unbind();\n        this.resetPreview();\n        this.cropper.parentNode.removeChild(this.cropper);\n        removeClass(this.element, CLASS_HIDDEN);\n      }\n    }, {\n      key: \"uncreate\",\n      value: function uncreate() {\n        if (this.ready) {\n          this.unbuild();\n          this.ready = false;\n          this.cropped = false;\n        } else if (this.sizing) {\n          this.sizingImage.onload = null;\n          this.sizing = false;\n          this.sized = false;\n        } else if (this.reloading) {\n          this.xhr.onabort = null;\n          this.xhr.abort();\n        } else if (this.image) {\n          this.stop();\n        }\n      }\n      /**\n       * Get the no conflict cropper class.\n       * @returns {Cropper} The cropper class.\n       */\n\n    }], [{\n      key: \"noConflict\",\n      value: function noConflict() {\n        window.Cropper = AnotherCropper;\n        return Cropper;\n      }\n      /**\n       * Change the default options.\n       * @param {Object} options - The new default options.\n       */\n\n    }, {\n      key: \"setDefaults\",\n      value: function setDefaults(options) {\n        assign(DEFAULTS, isPlainObject(options) && options);\n      }\n    }]);\n\n    return Cropper;\n  }();\n\n  assign(Cropper.prototype, render, preview, events, handlers, change, methods);\n\n  return Cropper;\n\n})));\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ImageCropperPage } from './image-cropper.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ImageCropperPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ImageCropperPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ImageCropperPageRoutingModule } from './image-cropper-routing.module';\n\nimport { ImageCropperPage } from './image-cropper.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ImageCropperPageRoutingModule\n  ],\n  declarations: [ImageCropperPage]\n})\nexport class ImageCropperPageModule {}\n","import { Component, OnInit, ViewChild, Input, ElementRef, AfterViewInit } from '@angular/core';\nimport Cropper from 'cropperjs';\nimport { ModalController, NavParams, LoadingController, ToastController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-image-cropper',\n  templateUrl: './image-cropper.page.html',\n  styleUrls: ['./image-cropper.page.scss'],\n})\nexport class ImageCropperPage implements OnInit, AfterViewInit {\n\n  @ViewChild('image', { static: false }) imageElement: ElementRef;\n\n  // tslint:disable-next-line: no-input-rename\n  @Input('imageFromProfilePage') imageFromProfilePage;\n\n  public imageDestination: string;\n  private cropper: Cropper;\n  uploadedPhotoURL;\n\n  constructor(\n    private modal: ModalController,\n    public navParams: NavParams,\n    private loading: LoadingController,\n    private toast: ToastController) {\n    this.imageDestination = this.imageFromProfilePage;\n    console.log(this.imageFromProfilePage)\n}\n\npublic ngAfterViewInit() {\n  this.cropper = new Cropper(this.imageElement.nativeElement, {\n      zoomable: true,\n      modal: true,\n      scalable: true,\n      aspectRatio: 1,\n      // autoCropArea: 1,\n      wheelZoomRatio: 0.8,\n      viewMode: 2,\n      center: true,\n      // responsive: true,\n      movable: true,\n      minContainerWidth: window.innerWidth,\n      minContainerHeight: 200,\n      zoomOnTouch: true,\n      zoomOnWheel: true,\n      crop: () => {\n          const canvas = this.cropper.getCroppedCanvas();\n          this.imageDestination = canvas.toDataURL('image/png', 0.1);\n      },\n      cropend: () => {\n        console.log('The crop ended');\n      }\n  });\n}\n\npublic ngOnInit() {\n  let cropperContainer = document.getElementsByClassName('cropper-container') as HTMLCollectionOf<HTMLElement>;\n  console.log(cropperContainer.item(1));\n\n  window.addEventListener('touchstart', (e) => {\n    console.log(e);\n    e.stopPropagation();\n    e.preventDefault(); //Most important\n  })\n  console.log(this.imageFromProfilePage);\n  this.uploadedPhotoURL = this.imageFromProfilePage;\n\n  // Since I am using this Cropper in a Modal, it needs to\n  // load AFTER the modal loads. SetTimeout was the solution here.\n  setTimeout(() => {\n    let cropperCanvas = document.getElementsByClassName('cropper-canvas')as HTMLCollectionOf<HTMLElement>;\n    console.log(cropperCanvas);\n    // The Canvas can be no bigger than the Container\n    // cropperCanvas.item(0).style.maxHeight = '100px';\n  }, 0);\n}\n\n  back() {\n    this.modal.dismiss();\n  }\n\n  crop(imageDestination) {\n    console.log('cropping');\n    this.modal.dismiss(\n      imageDestination\n    );\n\n  }\n}\n","export default \"<ion-header style=\\\"display: none;\\\"></ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row class=\\\"ion-justify-content-center\\\">\\n      <ion-col class=\\\"ion-text-center\\\" size=\\\"12\\\">\\n        <h6 class=\\\"text-header\\\">Please crop your photo to get the highest quality.<br> You can zoom in and out to make sure you get the best fit within the frame.</h6>\\n      </ion-col>\\n    </ion-row>\\n\\n    <!-- Selected Image -->\\n    <ion-row class=\\\"ion-justify-content-center\\\">\\n      <ion-col class=\\\"ion-text-center\\\" size=\\\"6\\\">\\n        <img [src]=\\\"imageDestination\\\" class=\\\"img-preview\\\">\\n      </ion-col>\\n    </ion-row>\\n\\n    <!-- Image Container -->\\n    <ion-row>\\n      <ion-col size=\\\"12\\\">\\n       <div class=\\\"img-container\\\">\\n        <img #image [src]=\\\"uploadedPhotoURL\\\" crossorigin>\\n      </div>\\n     </ion-col>\\n    </ion-row>\\n\\n    <!-- Buttons -->\\n    <ion-row class=\\\"ion-justify-content-center\\\">\\n      <ion-col class=\\\"ion-text-center\\\" size=\\\"8\\\">\\n        <ion-button class=\\\"orange-button\\\" (click)=\\\"crop(imageDestination)\\\">\\n          Crop\\n        </ion-button>\\n     </ion-col>\\n     <ion-col class=\\\"ion-text-center\\\" size=\\\"8\\\">\\n       <ion-button class=\\\"blue-button\\\" (click)=\\\"back()\\\">\\n         Cancel\\n       </ion-button>\\n    </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\";"]}